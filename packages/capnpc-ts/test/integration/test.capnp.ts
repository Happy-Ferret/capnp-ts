/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

/* tslint:disable */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "d508eebdc2dc42b8";
export enum TestEnum {
    FOO,
    BAR,
    BAZ,
    QUX,
    QUUX,
    CORGE,
    GRAULT,
    GARPLY
}
export class TestAllTypes extends __S {
    static readonly _capnp = { displayName: "TestAllTypes", id: "a0a8f314b80b63fd", size: new __O(48, 20) };
    static _StructList: capnp.ListCtor<TestAllTypes>;
    getBoolField(): boolean { return __S.getBit(0, this); }
    setBoolField(value: boolean): void { __S.setBit(0, value, this); }
    getInt8Field(): number { return __S.getInt8(1, this); }
    setInt8Field(value: number): void { __S.setInt8(1, value, this); }
    getInt16Field(): number { return __S.getInt16(2, this); }
    setInt16Field(value: number): void { __S.setInt16(2, value, this); }
    getInt32Field(): number { return __S.getInt32(4, this); }
    setInt32Field(value: number): void { __S.setInt32(4, value, this); }
    getInt64Field(): capnp.Int64 { return __S.getInt64(8, this); }
    setInt64Field(value: capnp.Int64): void { __S.setInt64(8, value, this); }
    getUInt8Field(): number { return __S.getUint8(16, this); }
    setUInt8Field(value: number): void { __S.setUint8(16, value, this); }
    getUInt16Field(): number { return __S.getUint16(18, this); }
    setUInt16Field(value: number): void { __S.setUint16(18, value, this); }
    getUInt32Field(): number { return __S.getUint32(20, this); }
    setUInt32Field(value: number): void { __S.setUint32(20, value, this); }
    getUInt64Field(): capnp.Uint64 { return __S.getUint64(24, this); }
    setUInt64Field(value: capnp.Uint64): void { __S.setUint64(24, value, this); }
    getFloat32Field(): number { return __S.getFloat32(32, this); }
    setFloat32Field(value: number): void { __S.setFloat32(32, value, this); }
    getFloat64Field(): number { return __S.getFloat64(40, this); }
    setFloat64Field(value: number): void { __S.setFloat64(40, value, this); }
    getTextField(): string { return __S.getText(0, this); }
    setTextField(value: string): void { __S.setText(0, value, this); }
    adoptDataField(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownDataField(): capnp.Orphan<capnp.Data> { return __S.disown(this.getDataField()); }
    getDataField(): capnp.Data { return __S.getData(1, this); }
    hasDataField(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initDataField(length: number): capnp.Data { return __S.initData(1, length, this); }
    setDataField(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptStructField(value: capnp.Orphan<TestAllTypes>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownStructField(): capnp.Orphan<TestAllTypes> { return __S.disown(this.getStructField()); }
    getStructField(): TestAllTypes { return __S.getStruct(2, TestAllTypes, this); }
    hasStructField(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initStructField(): TestAllTypes { return __S.initStructAt(2, TestAllTypes, this); }
    setStructField(value: TestAllTypes): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    getEnumField(): TestEnum { return __S.getUint16(36, this); }
    setEnumField(value: TestEnum): void { __S.setUint16(36, value, this); }
    adoptVoidList(value: capnp.Orphan<capnp.List<capnp.Void>>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownVoidList(): capnp.Orphan<capnp.List<capnp.Void>> { return __S.disown(this.getVoidList()); }
    getVoidList(): capnp.List<capnp.Void> { return __S.getList(3, capnp.VoidList, this); }
    hasVoidList(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initVoidList(length: number): capnp.List<capnp.Void> { return __S.initList(3, capnp.VoidList, length, this); }
    setVoidList(value: capnp.List<capnp.Void>): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptBoolList(value: capnp.Orphan<capnp.List<boolean>>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownBoolList(): capnp.Orphan<capnp.List<boolean>> { return __S.disown(this.getBoolList()); }
    getBoolList(): capnp.List<boolean> { return __S.getList(4, capnp.BoolList, this); }
    hasBoolList(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initBoolList(length: number): capnp.List<boolean> { return __S.initList(4, capnp.BoolList, length, this); }
    setBoolList(value: capnp.List<boolean>): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptInt8List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownInt8List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt8List()); }
    getInt8List(): capnp.List<number> { return __S.getList(5, capnp.Int8List, this); }
    hasInt8List(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initInt8List(length: number): capnp.List<number> { return __S.initList(5, capnp.Int8List, length, this); }
    setInt8List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    adoptInt16List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(6, this)); }
    disownInt16List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt16List()); }
    getInt16List(): capnp.List<number> { return __S.getList(6, capnp.Int16List, this); }
    hasInt16List(): boolean { return !__S.isNull(__S.getPointer(6, this)); }
    initInt16List(length: number): capnp.List<number> { return __S.initList(6, capnp.Int16List, length, this); }
    setInt16List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(6, this)); }
    adoptInt32List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(7, this)); }
    disownInt32List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt32List()); }
    getInt32List(): capnp.List<number> { return __S.getList(7, capnp.Int32List, this); }
    hasInt32List(): boolean { return !__S.isNull(__S.getPointer(7, this)); }
    initInt32List(length: number): capnp.List<number> { return __S.initList(7, capnp.Int32List, length, this); }
    setInt32List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(7, this)); }
    adoptInt64List(value: capnp.Orphan<capnp.List<capnp.Int64>>): void { __S.adopt(value, __S.getPointer(8, this)); }
    disownInt64List(): capnp.Orphan<capnp.List<capnp.Int64>> { return __S.disown(this.getInt64List()); }
    getInt64List(): capnp.List<capnp.Int64> { return __S.getList(8, capnp.Int64List, this); }
    hasInt64List(): boolean { return !__S.isNull(__S.getPointer(8, this)); }
    initInt64List(length: number): capnp.List<capnp.Int64> { return __S.initList(8, capnp.Int64List, length, this); }
    setInt64List(value: capnp.List<capnp.Int64>): void { __S.copyFrom(value, __S.getPointer(8, this)); }
    adoptUInt8List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(9, this)); }
    disownUInt8List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUInt8List()); }
    getUInt8List(): capnp.List<number> { return __S.getList(9, capnp.Uint8List, this); }
    hasUInt8List(): boolean { return !__S.isNull(__S.getPointer(9, this)); }
    initUInt8List(length: number): capnp.List<number> { return __S.initList(9, capnp.Uint8List, length, this); }
    setUInt8List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(9, this)); }
    adoptUInt16List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(10, this)); }
    disownUInt16List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUInt16List()); }
    getUInt16List(): capnp.List<number> { return __S.getList(10, capnp.Uint16List, this); }
    hasUInt16List(): boolean { return !__S.isNull(__S.getPointer(10, this)); }
    initUInt16List(length: number): capnp.List<number> { return __S.initList(10, capnp.Uint16List, length, this); }
    setUInt16List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(10, this)); }
    adoptUInt32List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(11, this)); }
    disownUInt32List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUInt32List()); }
    getUInt32List(): capnp.List<number> { return __S.getList(11, capnp.Uint32List, this); }
    hasUInt32List(): boolean { return !__S.isNull(__S.getPointer(11, this)); }
    initUInt32List(length: number): capnp.List<number> { return __S.initList(11, capnp.Uint32List, length, this); }
    setUInt32List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(11, this)); }
    adoptUInt64List(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void { __S.adopt(value, __S.getPointer(12, this)); }
    disownUInt64List(): capnp.Orphan<capnp.List<capnp.Uint64>> { return __S.disown(this.getUInt64List()); }
    getUInt64List(): capnp.List<capnp.Uint64> { return __S.getList(12, capnp.Uint64List, this); }
    hasUInt64List(): boolean { return !__S.isNull(__S.getPointer(12, this)); }
    initUInt64List(length: number): capnp.List<capnp.Uint64> { return __S.initList(12, capnp.Uint64List, length, this); }
    setUInt64List(value: capnp.List<capnp.Uint64>): void { __S.copyFrom(value, __S.getPointer(12, this)); }
    adoptFloat32List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(13, this)); }
    disownFloat32List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getFloat32List()); }
    getFloat32List(): capnp.List<number> { return __S.getList(13, capnp.Float32List, this); }
    hasFloat32List(): boolean { return !__S.isNull(__S.getPointer(13, this)); }
    initFloat32List(length: number): capnp.List<number> { return __S.initList(13, capnp.Float32List, length, this); }
    setFloat32List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(13, this)); }
    adoptFloat64List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(14, this)); }
    disownFloat64List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getFloat64List()); }
    getFloat64List(): capnp.List<number> { return __S.getList(14, capnp.Float64List, this); }
    hasFloat64List(): boolean { return !__S.isNull(__S.getPointer(14, this)); }
    initFloat64List(length: number): capnp.List<number> { return __S.initList(14, capnp.Float64List, length, this); }
    setFloat64List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(14, this)); }
    adoptTextList(value: capnp.Orphan<capnp.List<string>>): void { __S.adopt(value, __S.getPointer(15, this)); }
    disownTextList(): capnp.Orphan<capnp.List<string>> { return __S.disown(this.getTextList()); }
    getTextList(): capnp.List<string> { return __S.getList(15, capnp.TextList, this); }
    hasTextList(): boolean { return !__S.isNull(__S.getPointer(15, this)); }
    initTextList(length: number): capnp.List<string> { return __S.initList(15, capnp.TextList, length, this); }
    setTextList(value: capnp.List<string>): void { __S.copyFrom(value, __S.getPointer(15, this)); }
    adoptDataList(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(16, this)); }
    disownDataList(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getDataList()); }
    getDataList(): capnp.List<capnp.Data> { return __S.getList(16, capnp.DataList, this); }
    hasDataList(): boolean { return !__S.isNull(__S.getPointer(16, this)); }
    initDataList(length: number): capnp.List<capnp.Data> { return __S.initList(16, capnp.DataList, length, this); }
    setDataList(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(16, this)); }
    adoptStructList(value: capnp.Orphan<capnp.List<TestAllTypes>>): void { __S.adopt(value, __S.getPointer(17, this)); }
    disownStructList(): capnp.Orphan<capnp.List<TestAllTypes>> { return __S.disown(this.getStructList()); }
    getStructList(): capnp.List<TestAllTypes> { return __S.getList(17, TestAllTypes._StructList, this); }
    hasStructList(): boolean { return !__S.isNull(__S.getPointer(17, this)); }
    initStructList(length: number): capnp.List<TestAllTypes> { return __S.initList(17, TestAllTypes._StructList, length, this); }
    setStructList(value: capnp.List<TestAllTypes>): void { __S.copyFrom(value, __S.getPointer(17, this)); }
    adoptEnumList(value: capnp.Orphan<capnp.List<TestEnum>>): void { __S.adopt(value, __S.getPointer(18, this)); }
    disownEnumList(): capnp.Orphan<capnp.List<TestEnum>> { return __S.disown(this.getEnumList()); }
    getEnumList(): capnp.List<TestEnum> { return __S.getList(18, capnp.Uint16List, this); }
    hasEnumList(): boolean { return !__S.isNull(__S.getPointer(18, this)); }
    initEnumList(length: number): capnp.List<TestEnum> { return __S.initList(18, capnp.Uint16List, length, this); }
    setEnumList(value: capnp.List<TestEnum>): void { __S.copyFrom(value, __S.getPointer(18, this)); }
    adoptInterfaceList(value: capnp.Orphan<capnp.List<capnp.Void>>): void { __S.adopt(value, __S.getPointer(19, this)); }
    disownInterfaceList(): capnp.Orphan<capnp.List<capnp.Void>> { return __S.disown(this.getInterfaceList()); }
    getInterfaceList(): capnp.List<capnp.Void> { return __S.getList(19, capnp.VoidList, this); }
    hasInterfaceList(): boolean { return !__S.isNull(__S.getPointer(19, this)); }
    initInterfaceList(length: number): capnp.List<capnp.Void> { return __S.initList(19, capnp.VoidList, length, this); }
    setInterfaceList(value: capnp.List<capnp.Void>): void { __S.copyFrom(value, __S.getPointer(19, this)); }
    toString(): string { return "TestAllTypes_" + super.toString(); }
}
export class TestDefaults extends __S {
    static readonly _capnp = { displayName: "TestDefaults", id: "eb3f9ebe98c73cb6", size: new __O(48, 20), defaultBoolField: capnp.getBitMask(true, 0), defaultInt8Field: capnp.getInt8Mask(-123), defaultInt16Field: capnp.getInt16Mask(-12345), defaultInt32Field: capnp.getInt32Mask(-12345678), defaultInt64Field: capnp.getInt64Mask(new capnp.Int64(new Uint8Array([0x87, 0x20, 0xf2, 0x79]))), defaultUInt8Field: capnp.getUint8Mask(234), defaultUInt16Field: capnp.getUint16Mask(45678), defaultUInt32Field: capnp.getUint32Mask(3456789012), defaultUInt64Field: capnp.getUint64Mask(new capnp.Int64(new Uint8Array([0xd2, 0x0a, 0x1f, 0xeb]))), defaultFloat32Field: capnp.getFloat32Mask(1234.5), defaultFloat64Field: capnp.getFloat64Mask(-1.23e+47), defaultTextField: capnp.getTextDefault("eb3f9ebe98c73cb6", 12), defaultDataField: capnp.getPointerDefault("eb3f9ebe98c73cb6", 13), defaultStructField: capnp.getPointerDefault("eb3f9ebe98c73cb6", 14), defaultEnumField: capnp.getUint16Mask(5), defaultVoidList: capnp.getPointerDefault("eb3f9ebe98c73cb6", 17), defaultBoolList: capnp.getPointerDefault("eb3f9ebe98c73cb6", 18), defaultInt8List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 19), defaultInt16List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 20), defaultInt32List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 21), defaultInt64List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 22), defaultUInt8List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 23), defaultUInt16List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 24), defaultUInt32List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 25), defaultUInt64List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 26), defaultFloat32List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 27), defaultFloat64List: capnp.getPointerDefault("eb3f9ebe98c73cb6", 28), defaultTextList: capnp.getPointerDefault("eb3f9ebe98c73cb6", 29), defaultDataList: capnp.getPointerDefault("eb3f9ebe98c73cb6", 30), defaultStructList: capnp.getPointerDefault("eb3f9ebe98c73cb6", 31), defaultEnumList: capnp.getPointerDefault("eb3f9ebe98c73cb6", 32) };
    static _StructList: capnp.ListCtor<TestAllTypes>;
    getBoolField(): boolean { return __S.getBit(0, this, TestDefaults._capnp.defaultBoolField); }
    setBoolField(value: boolean): void { __S.setBit(0, value, this); }
    getInt8Field(): number { return __S.getInt8(1, this, TestDefaults._capnp.defaultInt8Field); }
    setInt8Field(value: number): void { __S.setInt8(1, value, this); }
    getInt16Field(): number { return __S.getInt16(2, this, TestDefaults._capnp.defaultInt16Field); }
    setInt16Field(value: number): void { __S.setInt16(2, value, this); }
    getInt32Field(): number { return __S.getInt32(4, this, TestDefaults._capnp.defaultInt32Field); }
    setInt32Field(value: number): void { __S.setInt32(4, value, this); }
    getInt64Field(): capnp.Int64 { return __S.getInt64(8, this, TestDefaults._capnp.defaultInt64Field); }
    setInt64Field(value: capnp.Int64): void { __S.setInt64(8, value, this); }
    getUInt8Field(): number { return __S.getUint8(16, this, TestDefaults._capnp.defaultUInt8Field); }
    setUInt8Field(value: number): void { __S.setUint8(16, value, this); }
    getUInt16Field(): number { return __S.getUint16(18, this, TestDefaults._capnp.defaultUInt16Field); }
    setUInt16Field(value: number): void { __S.setUint16(18, value, this); }
    getUInt32Field(): number { return __S.getUint32(20, this, TestDefaults._capnp.defaultUInt32Field); }
    setUInt32Field(value: number): void { __S.setUint32(20, value, this); }
    getUInt64Field(): capnp.Uint64 { return __S.getUint64(24, this, TestDefaults._capnp.defaultUInt64Field); }
    setUInt64Field(value: capnp.Uint64): void { __S.setUint64(24, value, this); }
    getFloat32Field(): number { return __S.getFloat32(32, this, TestDefaults._capnp.defaultFloat32Field); }
    setFloat32Field(value: number): void { __S.setFloat32(32, value, this); }
    getFloat64Field(): number { return __S.getFloat64(40, this, TestDefaults._capnp.defaultFloat64Field); }
    setFloat64Field(value: number): void { __S.setFloat64(40, value, this); }
    getTextField(): string { return __S.getText(0, this, TestDefaults._capnp.defaultTextField); }
    setTextField(value: string): void { __S.setText(0, value, this); }
    adoptDataField(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownDataField(): capnp.Orphan<capnp.Data> { return __S.disown(this.getDataField()); }
    getDataField(): capnp.Data { return __S.getData(1, this, TestDefaults._capnp.defaultDataField); }
    hasDataField(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initDataField(length: number): capnp.Data { return __S.initData(1, length, this); }
    setDataField(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptStructField(value: capnp.Orphan<TestAllTypes>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownStructField(): capnp.Orphan<TestAllTypes> { return __S.disown(this.getStructField()); }
    getStructField(): TestAllTypes { return __S.getStruct(2, TestAllTypes, this, TestDefaults._capnp.defaultStructField); }
    hasStructField(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initStructField(): TestAllTypes { return __S.initStructAt(2, TestAllTypes, this); }
    setStructField(value: TestAllTypes): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    getEnumField(): TestEnum { return __S.getUint16(36, this, TestDefaults._capnp.defaultEnumField); }
    setEnumField(value: TestEnum): void { __S.setUint16(36, value, this); }
    adoptVoidList(value: capnp.Orphan<capnp.List<capnp.Void>>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownVoidList(): capnp.Orphan<capnp.List<capnp.Void>> { return __S.disown(this.getVoidList()); }
    getVoidList(): capnp.List<capnp.Void> { return __S.getList(3, capnp.VoidList, this, TestDefaults._capnp.defaultVoidList); }
    hasVoidList(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initVoidList(length: number): capnp.List<capnp.Void> { return __S.initList(3, capnp.VoidList, length, this); }
    setVoidList(value: capnp.List<capnp.Void>): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptBoolList(value: capnp.Orphan<capnp.List<boolean>>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownBoolList(): capnp.Orphan<capnp.List<boolean>> { return __S.disown(this.getBoolList()); }
    getBoolList(): capnp.List<boolean> { return __S.getList(4, capnp.BoolList, this, TestDefaults._capnp.defaultBoolList); }
    hasBoolList(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initBoolList(length: number): capnp.List<boolean> { return __S.initList(4, capnp.BoolList, length, this); }
    setBoolList(value: capnp.List<boolean>): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptInt8List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownInt8List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt8List()); }
    getInt8List(): capnp.List<number> { return __S.getList(5, capnp.Int8List, this, TestDefaults._capnp.defaultInt8List); }
    hasInt8List(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initInt8List(length: number): capnp.List<number> { return __S.initList(5, capnp.Int8List, length, this); }
    setInt8List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    adoptInt16List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(6, this)); }
    disownInt16List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt16List()); }
    getInt16List(): capnp.List<number> { return __S.getList(6, capnp.Int16List, this, TestDefaults._capnp.defaultInt16List); }
    hasInt16List(): boolean { return !__S.isNull(__S.getPointer(6, this)); }
    initInt16List(length: number): capnp.List<number> { return __S.initList(6, capnp.Int16List, length, this); }
    setInt16List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(6, this)); }
    adoptInt32List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(7, this)); }
    disownInt32List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt32List()); }
    getInt32List(): capnp.List<number> { return __S.getList(7, capnp.Int32List, this, TestDefaults._capnp.defaultInt32List); }
    hasInt32List(): boolean { return !__S.isNull(__S.getPointer(7, this)); }
    initInt32List(length: number): capnp.List<number> { return __S.initList(7, capnp.Int32List, length, this); }
    setInt32List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(7, this)); }
    adoptInt64List(value: capnp.Orphan<capnp.List<capnp.Int64>>): void { __S.adopt(value, __S.getPointer(8, this)); }
    disownInt64List(): capnp.Orphan<capnp.List<capnp.Int64>> { return __S.disown(this.getInt64List()); }
    getInt64List(): capnp.List<capnp.Int64> { return __S.getList(8, capnp.Int64List, this, TestDefaults._capnp.defaultInt64List); }
    hasInt64List(): boolean { return !__S.isNull(__S.getPointer(8, this)); }
    initInt64List(length: number): capnp.List<capnp.Int64> { return __S.initList(8, capnp.Int64List, length, this); }
    setInt64List(value: capnp.List<capnp.Int64>): void { __S.copyFrom(value, __S.getPointer(8, this)); }
    adoptUInt8List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(9, this)); }
    disownUInt8List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUInt8List()); }
    getUInt8List(): capnp.List<number> { return __S.getList(9, capnp.Uint8List, this, TestDefaults._capnp.defaultUInt8List); }
    hasUInt8List(): boolean { return !__S.isNull(__S.getPointer(9, this)); }
    initUInt8List(length: number): capnp.List<number> { return __S.initList(9, capnp.Uint8List, length, this); }
    setUInt8List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(9, this)); }
    adoptUInt16List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(10, this)); }
    disownUInt16List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUInt16List()); }
    getUInt16List(): capnp.List<number> { return __S.getList(10, capnp.Uint16List, this, TestDefaults._capnp.defaultUInt16List); }
    hasUInt16List(): boolean { return !__S.isNull(__S.getPointer(10, this)); }
    initUInt16List(length: number): capnp.List<number> { return __S.initList(10, capnp.Uint16List, length, this); }
    setUInt16List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(10, this)); }
    adoptUInt32List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(11, this)); }
    disownUInt32List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUInt32List()); }
    getUInt32List(): capnp.List<number> { return __S.getList(11, capnp.Uint32List, this, TestDefaults._capnp.defaultUInt32List); }
    hasUInt32List(): boolean { return !__S.isNull(__S.getPointer(11, this)); }
    initUInt32List(length: number): capnp.List<number> { return __S.initList(11, capnp.Uint32List, length, this); }
    setUInt32List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(11, this)); }
    adoptUInt64List(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void { __S.adopt(value, __S.getPointer(12, this)); }
    disownUInt64List(): capnp.Orphan<capnp.List<capnp.Uint64>> { return __S.disown(this.getUInt64List()); }
    getUInt64List(): capnp.List<capnp.Uint64> { return __S.getList(12, capnp.Uint64List, this, TestDefaults._capnp.defaultUInt64List); }
    hasUInt64List(): boolean { return !__S.isNull(__S.getPointer(12, this)); }
    initUInt64List(length: number): capnp.List<capnp.Uint64> { return __S.initList(12, capnp.Uint64List, length, this); }
    setUInt64List(value: capnp.List<capnp.Uint64>): void { __S.copyFrom(value, __S.getPointer(12, this)); }
    adoptFloat32List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(13, this)); }
    disownFloat32List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getFloat32List()); }
    getFloat32List(): capnp.List<number> { return __S.getList(13, capnp.Float32List, this, TestDefaults._capnp.defaultFloat32List); }
    hasFloat32List(): boolean { return !__S.isNull(__S.getPointer(13, this)); }
    initFloat32List(length: number): capnp.List<number> { return __S.initList(13, capnp.Float32List, length, this); }
    setFloat32List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(13, this)); }
    adoptFloat64List(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(14, this)); }
    disownFloat64List(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getFloat64List()); }
    getFloat64List(): capnp.List<number> { return __S.getList(14, capnp.Float64List, this, TestDefaults._capnp.defaultFloat64List); }
    hasFloat64List(): boolean { return !__S.isNull(__S.getPointer(14, this)); }
    initFloat64List(length: number): capnp.List<number> { return __S.initList(14, capnp.Float64List, length, this); }
    setFloat64List(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(14, this)); }
    adoptTextList(value: capnp.Orphan<capnp.List<string>>): void { __S.adopt(value, __S.getPointer(15, this)); }
    disownTextList(): capnp.Orphan<capnp.List<string>> { return __S.disown(this.getTextList()); }
    getTextList(): capnp.List<string> { return __S.getList(15, capnp.TextList, this, TestDefaults._capnp.defaultTextList); }
    hasTextList(): boolean { return !__S.isNull(__S.getPointer(15, this)); }
    initTextList(length: number): capnp.List<string> { return __S.initList(15, capnp.TextList, length, this); }
    setTextList(value: capnp.List<string>): void { __S.copyFrom(value, __S.getPointer(15, this)); }
    adoptDataList(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(16, this)); }
    disownDataList(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getDataList()); }
    getDataList(): capnp.List<capnp.Data> { return __S.getList(16, capnp.DataList, this, TestDefaults._capnp.defaultDataList); }
    hasDataList(): boolean { return !__S.isNull(__S.getPointer(16, this)); }
    initDataList(length: number): capnp.List<capnp.Data> { return __S.initList(16, capnp.DataList, length, this); }
    setDataList(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(16, this)); }
    adoptStructList(value: capnp.Orphan<capnp.List<TestAllTypes>>): void { __S.adopt(value, __S.getPointer(17, this)); }
    disownStructList(): capnp.Orphan<capnp.List<TestAllTypes>> { return __S.disown(this.getStructList()); }
    getStructList(): capnp.List<TestAllTypes> { return __S.getList(17, TestDefaults._StructList, this, TestDefaults._capnp.defaultStructList); }
    hasStructList(): boolean { return !__S.isNull(__S.getPointer(17, this)); }
    initStructList(length: number): capnp.List<TestAllTypes> { return __S.initList(17, TestDefaults._StructList, length, this); }
    setStructList(value: capnp.List<TestAllTypes>): void { __S.copyFrom(value, __S.getPointer(17, this)); }
    adoptEnumList(value: capnp.Orphan<capnp.List<TestEnum>>): void { __S.adopt(value, __S.getPointer(18, this)); }
    disownEnumList(): capnp.Orphan<capnp.List<TestEnum>> { return __S.disown(this.getEnumList()); }
    getEnumList(): capnp.List<TestEnum> { return __S.getList(18, capnp.Uint16List, this, TestDefaults._capnp.defaultEnumList); }
    hasEnumList(): boolean { return !__S.isNull(__S.getPointer(18, this)); }
    initEnumList(length: number): capnp.List<TestEnum> { return __S.initList(18, capnp.Uint16List, length, this); }
    setEnumList(value: capnp.List<TestEnum>): void { __S.copyFrom(value, __S.getPointer(18, this)); }
    adoptInterfaceList(value: capnp.Orphan<capnp.List<capnp.Void>>): void { __S.adopt(value, __S.getPointer(19, this)); }
    disownInterfaceList(): capnp.Orphan<capnp.List<capnp.Void>> { return __S.disown(this.getInterfaceList()); }
    getInterfaceList(): capnp.List<capnp.Void> { return __S.getList(19, capnp.VoidList, this); }
    hasInterfaceList(): boolean { return !__S.isNull(__S.getPointer(19, this)); }
    initInterfaceList(length: number): capnp.List<capnp.Void> { return __S.initList(19, capnp.VoidList, length, this); }
    setInterfaceList(value: capnp.List<capnp.Void>): void { __S.copyFrom(value, __S.getPointer(19, this)); }
    toString(): string { return "TestDefaults_" + super.toString(); }
}
export class TestAnyPointer extends __S {
    static readonly _capnp = { displayName: "TestAnyPointer", id: "e3da5a2ccd28c0d8", size: new __O(0, 1) };
    adoptAnyPointerField(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownAnyPointerField(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getAnyPointerField()); }
    getAnyPointerField(): capnp.Pointer { return __S.getPointer(0, this); }
    hasAnyPointerField(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setAnyPointerField(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TestAnyPointer_" + super.toString(); }
}
export class TestAnyOthers extends __S {
    static readonly _capnp = { displayName: "TestAnyOthers", id: "f49850f63c2bfa59", size: new __O(0, 3) };
    adoptAnyStructField(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownAnyStructField(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getAnyStructField()); }
    getAnyStructField(): capnp.Pointer { return __S.getPointer(0, this); }
    hasAnyStructField(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setAnyStructField(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptAnyListField(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownAnyListField(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getAnyListField()); }
    getAnyListField(): capnp.Pointer { return __S.getPointer(1, this); }
    hasAnyListField(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    setAnyListField(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptCapabilityField(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownCapabilityField(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getCapabilityField()); }
    getCapabilityField(): capnp.Pointer { return __S.getPointer(2, this); }
    hasCapabilityField(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    setCapabilityField(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    toString(): string { return "TestAnyOthers_" + super.toString(); }
}
export class TestOutOfOrder extends __S {
    static readonly _capnp = { displayName: "TestOutOfOrder", id: "a9d5f8efe770022b", size: new __O(0, 9) };
    getFoo(): string { return __S.getText(3, this); }
    setFoo(value: string): void { __S.setText(3, value, this); }
    getBar(): string { return __S.getText(2, this); }
    setBar(value: string): void { __S.setText(2, value, this); }
    getBaz(): string { return __S.getText(8, this); }
    setBaz(value: string): void { __S.setText(8, value, this); }
    getQux(): string { return __S.getText(0, this); }
    setQux(value: string): void { __S.setText(0, value, this); }
    getQuux(): string { return __S.getText(6, this); }
    setQuux(value: string): void { __S.setText(6, value, this); }
    getCorge(): string { return __S.getText(4, this); }
    setCorge(value: string): void { __S.setText(4, value, this); }
    getGrault(): string { return __S.getText(1, this); }
    setGrault(value: string): void { __S.setText(1, value, this); }
    getGarply(): string { return __S.getText(7, this); }
    setGarply(value: string): void { __S.setText(7, value, this); }
    getWaldo(): string { return __S.getText(5, this); }
    setWaldo(value: string): void { __S.setText(5, value, this); }
    toString(): string { return "TestOutOfOrder_" + super.toString(); }
}
export enum TestUnion_Union2_Which {
    U2F0S64 = 4,
    U2F0S32 = 3,
    U2F0S16 = 2,
    U2F0S8 = 1,
    U2F0S1 = 0
}
export class TestUnion_Union2 extends __S {
    static readonly U2F0S64 = TestUnion_Union2_Which.U2F0S64;
    static readonly U2F0S32 = TestUnion_Union2_Which.U2F0S32;
    static readonly U2F0S16 = TestUnion_Union2_Which.U2F0S16;
    static readonly U2F0S8 = TestUnion_Union2_Which.U2F0S8;
    static readonly U2F0S1 = TestUnion_Union2_Which.U2F0S1;
    static readonly _capnp = { displayName: "union2", id: "afc5fd419f0d66d4", size: new __O(64, 2) };
    getU2f0s64(): capnp.Int64 {
        __S.testWhich("u2f0s64", __S.getUint16(4, this), 4, this);
        return __S.getInt64(48, this);
    }
    isU2f0s64(): boolean { return __S.getUint16(4, this) === 4; }
    setU2f0s64(value: capnp.Int64): void {
        __S.setUint16(4, 4, this);
        __S.setInt64(48, value, this);
    }
    getU2f0s32(): number {
        __S.testWhich("u2f0s32", __S.getUint16(4, this), 3, this);
        return __S.getInt32(40, this);
    }
    isU2f0s32(): boolean { return __S.getUint16(4, this) === 3; }
    setU2f0s32(value: number): void {
        __S.setUint16(4, 3, this);
        __S.setInt32(40, value, this);
    }
    getU2f0s16(): number {
        __S.testWhich("u2f0s16", __S.getUint16(4, this), 2, this);
        return __S.getInt16(36, this);
    }
    isU2f0s16(): boolean { return __S.getUint16(4, this) === 2; }
    setU2f0s16(value: number): void {
        __S.setUint16(4, 2, this);
        __S.setInt16(36, value, this);
    }
    getU2f0s8(): number {
        __S.testWhich("u2f0s8", __S.getUint16(4, this), 1, this);
        return __S.getInt8(33, this);
    }
    isU2f0s8(): boolean { return __S.getUint16(4, this) === 1; }
    setU2f0s8(value: number): void {
        __S.setUint16(4, 1, this);
        __S.setInt8(33, value, this);
    }
    getU2f0s1(): boolean {
        __S.testWhich("u2f0s1", __S.getUint16(4, this), 0, this);
        return __S.getBit(256, this);
    }
    isU2f0s1(): boolean { return __S.getUint16(4, this) === 0; }
    setU2f0s1(value: boolean): void {
        __S.setUint16(4, 0, this);
        __S.setBit(256, value, this);
    }
    toString(): string { return "TestUnion_Union2_" + super.toString(); }
    which(): TestUnion_Union2_Which { return __S.getUint16(4, this); }
}
export enum TestUnion_Union3_Which {
    U3F0S64 = 4,
    U3F0S32 = 3,
    U3F0S16 = 2,
    U3F0S8 = 1,
    U3F0S1 = 0
}
export class TestUnion_Union3 extends __S {
    static readonly U3F0S64 = TestUnion_Union3_Which.U3F0S64;
    static readonly U3F0S32 = TestUnion_Union3_Which.U3F0S32;
    static readonly U3F0S16 = TestUnion_Union3_Which.U3F0S16;
    static readonly U3F0S8 = TestUnion_Union3_Which.U3F0S8;
    static readonly U3F0S1 = TestUnion_Union3_Which.U3F0S1;
    static readonly _capnp = { displayName: "union3", id: "a2fb022ec7f30053", size: new __O(64, 2) };
    getU3f0s64(): capnp.Int64 {
        __S.testWhich("u3f0s64", __S.getUint16(6, this), 4, this);
        return __S.getInt64(56, this);
    }
    isU3f0s64(): boolean { return __S.getUint16(6, this) === 4; }
    setU3f0s64(value: capnp.Int64): void {
        __S.setUint16(6, 4, this);
        __S.setInt64(56, value, this);
    }
    getU3f0s32(): number {
        __S.testWhich("u3f0s32", __S.getUint16(6, this), 3, this);
        return __S.getInt32(44, this);
    }
    isU3f0s32(): boolean { return __S.getUint16(6, this) === 3; }
    setU3f0s32(value: number): void {
        __S.setUint16(6, 3, this);
        __S.setInt32(44, value, this);
    }
    getU3f0s16(): number {
        __S.testWhich("u3f0s16", __S.getUint16(6, this), 2, this);
        return __S.getInt16(38, this);
    }
    isU3f0s16(): boolean { return __S.getUint16(6, this) === 2; }
    setU3f0s16(value: number): void {
        __S.setUint16(6, 2, this);
        __S.setInt16(38, value, this);
    }
    getU3f0s8(): number {
        __S.testWhich("u3f0s8", __S.getUint16(6, this), 1, this);
        return __S.getInt8(34, this);
    }
    isU3f0s8(): boolean { return __S.getUint16(6, this) === 1; }
    setU3f0s8(value: number): void {
        __S.setUint16(6, 1, this);
        __S.setInt8(34, value, this);
    }
    getU3f0s1(): boolean {
        __S.testWhich("u3f0s1", __S.getUint16(6, this), 0, this);
        return __S.getBit(257, this);
    }
    isU3f0s1(): boolean { return __S.getUint16(6, this) === 0; }
    setU3f0s1(value: boolean): void {
        __S.setUint16(6, 0, this);
        __S.setBit(257, value, this);
    }
    toString(): string { return "TestUnion_Union3_" + super.toString(); }
    which(): TestUnion_Union3_Which { return __S.getUint16(6, this); }
}
export enum TestUnion_Union1_Which {
    U1F0S0 = 0,
    U1F0S1 = 1,
    U1F1S1 = 2,
    U1F0S8 = 3,
    U1F1S8 = 4,
    U1F0S16 = 5,
    U1F1S16 = 6,
    U1F0S32 = 7,
    U1F1S32 = 8,
    U1F0S64 = 9,
    U1F1S64 = 10,
    U1F0SP = 11,
    U1F1SP = 12,
    U1F2S0 = 13,
    U1F2S1 = 14,
    U1F2S8 = 15,
    U1F2S16 = 16,
    U1F2S32 = 17,
    U1F2S64 = 18,
    U1F2SP = 19
}
export class TestUnion_Union1 extends __S {
    static readonly U1F0S0 = TestUnion_Union1_Which.U1F0S0;
    static readonly U1F0S1 = TestUnion_Union1_Which.U1F0S1;
    static readonly U1F1S1 = TestUnion_Union1_Which.U1F1S1;
    static readonly U1F0S8 = TestUnion_Union1_Which.U1F0S8;
    static readonly U1F1S8 = TestUnion_Union1_Which.U1F1S8;
    static readonly U1F0S16 = TestUnion_Union1_Which.U1F0S16;
    static readonly U1F1S16 = TestUnion_Union1_Which.U1F1S16;
    static readonly U1F0S32 = TestUnion_Union1_Which.U1F0S32;
    static readonly U1F1S32 = TestUnion_Union1_Which.U1F1S32;
    static readonly U1F0S64 = TestUnion_Union1_Which.U1F0S64;
    static readonly U1F1S64 = TestUnion_Union1_Which.U1F1S64;
    static readonly U1F0SP = TestUnion_Union1_Which.U1F0SP;
    static readonly U1F1SP = TestUnion_Union1_Which.U1F1SP;
    static readonly U1F2S0 = TestUnion_Union1_Which.U1F2S0;
    static readonly U1F2S1 = TestUnion_Union1_Which.U1F2S1;
    static readonly U1F2S8 = TestUnion_Union1_Which.U1F2S8;
    static readonly U1F2S16 = TestUnion_Union1_Which.U1F2S16;
    static readonly U1F2S32 = TestUnion_Union1_Which.U1F2S32;
    static readonly U1F2S64 = TestUnion_Union1_Which.U1F2S64;
    static readonly U1F2SP = TestUnion_Union1_Which.U1F2SP;
    static readonly _capnp = { displayName: "union1", id: "ee0a6b99b7dc7ab2", size: new __O(64, 2) };
    isU1f0s0(): boolean { return __S.getUint16(2, this) === 0; }
    setU1f0s0(): void { __S.setUint16(2, 0, this); }
    getU1f0s1(): boolean {
        __S.testWhich("u1f0s1", __S.getUint16(2, this), 1, this);
        return __S.getBit(129, this);
    }
    isU1f0s1(): boolean { return __S.getUint16(2, this) === 1; }
    setU1f0s1(value: boolean): void {
        __S.setUint16(2, 1, this);
        __S.setBit(129, value, this);
    }
    getU1f1s1(): boolean {
        __S.testWhich("u1f1s1", __S.getUint16(2, this), 2, this);
        return __S.getBit(129, this);
    }
    isU1f1s1(): boolean { return __S.getUint16(2, this) === 2; }
    setU1f1s1(value: boolean): void {
        __S.setUint16(2, 2, this);
        __S.setBit(129, value, this);
    }
    getU1f0s8(): number {
        __S.testWhich("u1f0s8", __S.getUint16(2, this), 3, this);
        return __S.getInt8(17, this);
    }
    isU1f0s8(): boolean { return __S.getUint16(2, this) === 3; }
    setU1f0s8(value: number): void {
        __S.setUint16(2, 3, this);
        __S.setInt8(17, value, this);
    }
    getU1f1s8(): number {
        __S.testWhich("u1f1s8", __S.getUint16(2, this), 4, this);
        return __S.getInt8(17, this);
    }
    isU1f1s8(): boolean { return __S.getUint16(2, this) === 4; }
    setU1f1s8(value: number): void {
        __S.setUint16(2, 4, this);
        __S.setInt8(17, value, this);
    }
    getU1f0s16(): number {
        __S.testWhich("u1f0s16", __S.getUint16(2, this), 5, this);
        return __S.getInt16(18, this);
    }
    isU1f0s16(): boolean { return __S.getUint16(2, this) === 5; }
    setU1f0s16(value: number): void {
        __S.setUint16(2, 5, this);
        __S.setInt16(18, value, this);
    }
    getU1f1s16(): number {
        __S.testWhich("u1f1s16", __S.getUint16(2, this), 6, this);
        return __S.getInt16(18, this);
    }
    isU1f1s16(): boolean { return __S.getUint16(2, this) === 6; }
    setU1f1s16(value: number): void {
        __S.setUint16(2, 6, this);
        __S.setInt16(18, value, this);
    }
    getU1f0s32(): number {
        __S.testWhich("u1f0s32", __S.getUint16(2, this), 7, this);
        return __S.getInt32(20, this);
    }
    isU1f0s32(): boolean { return __S.getUint16(2, this) === 7; }
    setU1f0s32(value: number): void {
        __S.setUint16(2, 7, this);
        __S.setInt32(20, value, this);
    }
    getU1f1s32(): number {
        __S.testWhich("u1f1s32", __S.getUint16(2, this), 8, this);
        return __S.getInt32(20, this);
    }
    isU1f1s32(): boolean { return __S.getUint16(2, this) === 8; }
    setU1f1s32(value: number): void {
        __S.setUint16(2, 8, this);
        __S.setInt32(20, value, this);
    }
    getU1f0s64(): capnp.Int64 {
        __S.testWhich("u1f0s64", __S.getUint16(2, this), 9, this);
        return __S.getInt64(24, this);
    }
    isU1f0s64(): boolean { return __S.getUint16(2, this) === 9; }
    setU1f0s64(value: capnp.Int64): void {
        __S.setUint16(2, 9, this);
        __S.setInt64(24, value, this);
    }
    getU1f1s64(): capnp.Int64 {
        __S.testWhich("u1f1s64", __S.getUint16(2, this), 10, this);
        return __S.getInt64(24, this);
    }
    isU1f1s64(): boolean { return __S.getUint16(2, this) === 10; }
    setU1f1s64(value: capnp.Int64): void {
        __S.setUint16(2, 10, this);
        __S.setInt64(24, value, this);
    }
    getU1f0sp(): string {
        __S.testWhich("u1f0sp", __S.getUint16(2, this), 11, this);
        return __S.getText(1, this);
    }
    isU1f0sp(): boolean { return __S.getUint16(2, this) === 11; }
    setU1f0sp(value: string): void {
        __S.setUint16(2, 11, this);
        __S.setText(1, value, this);
    }
    getU1f1sp(): string {
        __S.testWhich("u1f1sp", __S.getUint16(2, this), 12, this);
        return __S.getText(1, this);
    }
    isU1f1sp(): boolean { return __S.getUint16(2, this) === 12; }
    setU1f1sp(value: string): void {
        __S.setUint16(2, 12, this);
        __S.setText(1, value, this);
    }
    isU1f2s0(): boolean { return __S.getUint16(2, this) === 13; }
    setU1f2s0(): void { __S.setUint16(2, 13, this); }
    getU1f2s1(): boolean {
        __S.testWhich("u1f2s1", __S.getUint16(2, this), 14, this);
        return __S.getBit(129, this);
    }
    isU1f2s1(): boolean { return __S.getUint16(2, this) === 14; }
    setU1f2s1(value: boolean): void {
        __S.setUint16(2, 14, this);
        __S.setBit(129, value, this);
    }
    getU1f2s8(): number {
        __S.testWhich("u1f2s8", __S.getUint16(2, this), 15, this);
        return __S.getInt8(17, this);
    }
    isU1f2s8(): boolean { return __S.getUint16(2, this) === 15; }
    setU1f2s8(value: number): void {
        __S.setUint16(2, 15, this);
        __S.setInt8(17, value, this);
    }
    getU1f2s16(): number {
        __S.testWhich("u1f2s16", __S.getUint16(2, this), 16, this);
        return __S.getInt16(18, this);
    }
    isU1f2s16(): boolean { return __S.getUint16(2, this) === 16; }
    setU1f2s16(value: number): void {
        __S.setUint16(2, 16, this);
        __S.setInt16(18, value, this);
    }
    getU1f2s32(): number {
        __S.testWhich("u1f2s32", __S.getUint16(2, this), 17, this);
        return __S.getInt32(20, this);
    }
    isU1f2s32(): boolean { return __S.getUint16(2, this) === 17; }
    setU1f2s32(value: number): void {
        __S.setUint16(2, 17, this);
        __S.setInt32(20, value, this);
    }
    getU1f2s64(): capnp.Int64 {
        __S.testWhich("u1f2s64", __S.getUint16(2, this), 18, this);
        return __S.getInt64(24, this);
    }
    isU1f2s64(): boolean { return __S.getUint16(2, this) === 18; }
    setU1f2s64(value: capnp.Int64): void {
        __S.setUint16(2, 18, this);
        __S.setInt64(24, value, this);
    }
    getU1f2sp(): string {
        __S.testWhich("u1f2sp", __S.getUint16(2, this), 19, this);
        return __S.getText(1, this);
    }
    isU1f2sp(): boolean { return __S.getUint16(2, this) === 19; }
    setU1f2sp(value: string): void {
        __S.setUint16(2, 19, this);
        __S.setText(1, value, this);
    }
    toString(): string { return "TestUnion_Union1_" + super.toString(); }
    which(): TestUnion_Union1_Which { return __S.getUint16(2, this); }
}
export enum TestUnion_Union0_Which {
    U0F0S0 = 0,
    U0F0S1 = 1,
    U0F0S8 = 2,
    U0F0S16 = 3,
    U0F0S32 = 4,
    U0F0S64 = 5,
    U0F0SP = 6,
    U0F1S0 = 7,
    U0F1S1 = 8,
    U0F1S8 = 9,
    U0F1S16 = 10,
    U0F1S32 = 11,
    U0F1S64 = 12,
    U0F1SP = 13
}
export class TestUnion_Union0 extends __S {
    static readonly U0F0S0 = TestUnion_Union0_Which.U0F0S0;
    static readonly U0F0S1 = TestUnion_Union0_Which.U0F0S1;
    static readonly U0F0S8 = TestUnion_Union0_Which.U0F0S8;
    static readonly U0F0S16 = TestUnion_Union0_Which.U0F0S16;
    static readonly U0F0S32 = TestUnion_Union0_Which.U0F0S32;
    static readonly U0F0S64 = TestUnion_Union0_Which.U0F0S64;
    static readonly U0F0SP = TestUnion_Union0_Which.U0F0SP;
    static readonly U0F1S0 = TestUnion_Union0_Which.U0F1S0;
    static readonly U0F1S1 = TestUnion_Union0_Which.U0F1S1;
    static readonly U0F1S8 = TestUnion_Union0_Which.U0F1S8;
    static readonly U0F1S16 = TestUnion_Union0_Which.U0F1S16;
    static readonly U0F1S32 = TestUnion_Union0_Which.U0F1S32;
    static readonly U0F1S64 = TestUnion_Union0_Which.U0F1S64;
    static readonly U0F1SP = TestUnion_Union0_Which.U0F1SP;
    static readonly _capnp = { displayName: "union0", id: "fc76a82eecb7a718", size: new __O(64, 2) };
    isU0f0s0(): boolean { return __S.getUint16(0, this) === 0; }
    setU0f0s0(): void { __S.setUint16(0, 0, this); }
    getU0f0s1(): boolean {
        __S.testWhich("u0f0s1", __S.getUint16(0, this), 1, this);
        return __S.getBit(64, this);
    }
    isU0f0s1(): boolean { return __S.getUint16(0, this) === 1; }
    setU0f0s1(value: boolean): void {
        __S.setUint16(0, 1, this);
        __S.setBit(64, value, this);
    }
    getU0f0s8(): number {
        __S.testWhich("u0f0s8", __S.getUint16(0, this), 2, this);
        return __S.getInt8(8, this);
    }
    isU0f0s8(): boolean { return __S.getUint16(0, this) === 2; }
    setU0f0s8(value: number): void {
        __S.setUint16(0, 2, this);
        __S.setInt8(8, value, this);
    }
    getU0f0s16(): number {
        __S.testWhich("u0f0s16", __S.getUint16(0, this), 3, this);
        return __S.getInt16(8, this);
    }
    isU0f0s16(): boolean { return __S.getUint16(0, this) === 3; }
    setU0f0s16(value: number): void {
        __S.setUint16(0, 3, this);
        __S.setInt16(8, value, this);
    }
    getU0f0s32(): number {
        __S.testWhich("u0f0s32", __S.getUint16(0, this), 4, this);
        return __S.getInt32(8, this);
    }
    isU0f0s32(): boolean { return __S.getUint16(0, this) === 4; }
    setU0f0s32(value: number): void {
        __S.setUint16(0, 4, this);
        __S.setInt32(8, value, this);
    }
    getU0f0s64(): capnp.Int64 {
        __S.testWhich("u0f0s64", __S.getUint16(0, this), 5, this);
        return __S.getInt64(8, this);
    }
    isU0f0s64(): boolean { return __S.getUint16(0, this) === 5; }
    setU0f0s64(value: capnp.Int64): void {
        __S.setUint16(0, 5, this);
        __S.setInt64(8, value, this);
    }
    getU0f0sp(): string {
        __S.testWhich("u0f0sp", __S.getUint16(0, this), 6, this);
        return __S.getText(0, this);
    }
    isU0f0sp(): boolean { return __S.getUint16(0, this) === 6; }
    setU0f0sp(value: string): void {
        __S.setUint16(0, 6, this);
        __S.setText(0, value, this);
    }
    isU0f1s0(): boolean { return __S.getUint16(0, this) === 7; }
    setU0f1s0(): void { __S.setUint16(0, 7, this); }
    getU0f1s1(): boolean {
        __S.testWhich("u0f1s1", __S.getUint16(0, this), 8, this);
        return __S.getBit(64, this);
    }
    isU0f1s1(): boolean { return __S.getUint16(0, this) === 8; }
    setU0f1s1(value: boolean): void {
        __S.setUint16(0, 8, this);
        __S.setBit(64, value, this);
    }
    getU0f1s8(): number {
        __S.testWhich("u0f1s8", __S.getUint16(0, this), 9, this);
        return __S.getInt8(8, this);
    }
    isU0f1s8(): boolean { return __S.getUint16(0, this) === 9; }
    setU0f1s8(value: number): void {
        __S.setUint16(0, 9, this);
        __S.setInt8(8, value, this);
    }
    getU0f1s16(): number {
        __S.testWhich("u0f1s16", __S.getUint16(0, this), 10, this);
        return __S.getInt16(8, this);
    }
    isU0f1s16(): boolean { return __S.getUint16(0, this) === 10; }
    setU0f1s16(value: number): void {
        __S.setUint16(0, 10, this);
        __S.setInt16(8, value, this);
    }
    getU0f1s32(): number {
        __S.testWhich("u0f1s32", __S.getUint16(0, this), 11, this);
        return __S.getInt32(8, this);
    }
    isU0f1s32(): boolean { return __S.getUint16(0, this) === 11; }
    setU0f1s32(value: number): void {
        __S.setUint16(0, 11, this);
        __S.setInt32(8, value, this);
    }
    getU0f1s64(): capnp.Int64 {
        __S.testWhich("u0f1s64", __S.getUint16(0, this), 12, this);
        return __S.getInt64(8, this);
    }
    isU0f1s64(): boolean { return __S.getUint16(0, this) === 12; }
    setU0f1s64(value: capnp.Int64): void {
        __S.setUint16(0, 12, this);
        __S.setInt64(8, value, this);
    }
    getU0f1sp(): string {
        __S.testWhich("u0f1sp", __S.getUint16(0, this), 13, this);
        return __S.getText(0, this);
    }
    isU0f1sp(): boolean { return __S.getUint16(0, this) === 13; }
    setU0f1sp(value: string): void {
        __S.setUint16(0, 13, this);
        __S.setText(0, value, this);
    }
    toString(): string { return "TestUnion_Union0_" + super.toString(); }
    which(): TestUnion_Union0_Which { return __S.getUint16(0, this); }
}
export class TestUnion extends __S {
    static readonly _capnp = { displayName: "TestUnion", id: "f47697362233ce52", size: new __O(64, 2) };
    getUnion0(): TestUnion_Union0 { return __S.getAs(TestUnion_Union0, this); }
    initUnion0(): TestUnion_Union0 { return __S.getAs(TestUnion_Union0, this); }
    getBit0(): boolean { return __S.getBit(128, this); }
    setBit0(value: boolean): void { __S.setBit(128, value, this); }
    getUnion1(): TestUnion_Union1 { return __S.getAs(TestUnion_Union1, this); }
    initUnion1(): TestUnion_Union1 { return __S.getAs(TestUnion_Union1, this); }
    getBit2(): boolean { return __S.getBit(130, this); }
    setBit2(value: boolean): void { __S.setBit(130, value, this); }
    getBit3(): boolean { return __S.getBit(131, this); }
    setBit3(value: boolean): void { __S.setBit(131, value, this); }
    getBit4(): boolean { return __S.getBit(132, this); }
    setBit4(value: boolean): void { __S.setBit(132, value, this); }
    getBit5(): boolean { return __S.getBit(133, this); }
    setBit5(value: boolean): void { __S.setBit(133, value, this); }
    getBit6(): boolean { return __S.getBit(134, this); }
    setBit6(value: boolean): void { __S.setBit(134, value, this); }
    getBit7(): boolean { return __S.getBit(135, this); }
    setBit7(value: boolean): void { __S.setBit(135, value, this); }
    getUnion2(): TestUnion_Union2 { return __S.getAs(TestUnion_Union2, this); }
    initUnion2(): TestUnion_Union2 { return __S.getAs(TestUnion_Union2, this); }
    getUnion3(): TestUnion_Union3 { return __S.getAs(TestUnion_Union3, this); }
    initUnion3(): TestUnion_Union3 { return __S.getAs(TestUnion_Union3, this); }
    getByte0(): number { return __S.getUint8(35, this); }
    setByte0(value: number): void { __S.setUint8(35, value, this); }
    toString(): string { return "TestUnion_" + super.toString(); }
}
export enum TestUnnamedUnion_Which {
    FOO = 0,
    BAR = 1
}
export class TestUnnamedUnion extends __S {
    static readonly FOO = TestUnnamedUnion_Which.FOO;
    static readonly BAR = TestUnnamedUnion_Which.BAR;
    static readonly _capnp = { displayName: "TestUnnamedUnion", id: "9e2e784c915329b6", size: new __O(16, 2) };
    getBefore(): string { return __S.getText(0, this); }
    setBefore(value: string): void { __S.setText(0, value, this); }
    getFoo(): number {
        __S.testWhich("foo", __S.getUint16(4, this), 0, this);
        return __S.getUint16(0, this);
    }
    isFoo(): boolean { return __S.getUint16(4, this) === 0; }
    setFoo(value: number): void {
        __S.setUint16(4, 0, this);
        __S.setUint16(0, value, this);
    }
    getBar(): number {
        __S.testWhich("bar", __S.getUint16(4, this), 1, this);
        return __S.getUint32(8, this);
    }
    isBar(): boolean { return __S.getUint16(4, this) === 1; }
    setBar(value: number): void {
        __S.setUint16(4, 1, this);
        __S.setUint32(8, value, this);
    }
    getMiddle(): number { return __S.getUint16(2, this); }
    setMiddle(value: number): void { __S.setUint16(2, value, this); }
    getAfter(): string { return __S.getText(1, this); }
    setAfter(value: string): void { __S.setText(1, value, this); }
    toString(): string { return "TestUnnamedUnion_" + super.toString(); }
    which(): TestUnnamedUnion_Which { return __S.getUint16(4, this); }
}
export enum TestUnionInUnion_Outer_Inner_Which {
    FOO = 0,
    BAR = 1
}
export class TestUnionInUnion_Outer_Inner extends __S {
    static readonly FOO = TestUnionInUnion_Outer_Inner_Which.FOO;
    static readonly BAR = TestUnionInUnion_Outer_Inner_Which.BAR;
    static readonly _capnp = { displayName: "inner", id: "ff9ce111c6f8e5db", size: new __O(16, 0) };
    getFoo(): number {
        __S.testWhich("foo", __S.getUint16(4, this), 0, this);
        return __S.getInt32(0, this);
    }
    isFoo(): boolean { return __S.getUint16(4, this) === 0; }
    setFoo(value: number): void {
        __S.setUint16(4, 0, this);
        __S.setInt32(0, value, this);
    }
    getBar(): number {
        __S.testWhich("bar", __S.getUint16(4, this), 1, this);
        return __S.getInt32(0, this);
    }
    isBar(): boolean { return __S.getUint16(4, this) === 1; }
    setBar(value: number): void {
        __S.setUint16(4, 1, this);
        __S.setInt32(0, value, this);
    }
    toString(): string { return "TestUnionInUnion_Outer_Inner_" + super.toString(); }
    which(): TestUnionInUnion_Outer_Inner_Which { return __S.getUint16(4, this); }
}
export enum TestUnionInUnion_Outer_Which {
    INNER = 0,
    BAZ = 1
}
export class TestUnionInUnion_Outer extends __S {
    static readonly INNER = TestUnionInUnion_Outer_Which.INNER;
    static readonly BAZ = TestUnionInUnion_Outer_Which.BAZ;
    static readonly _capnp = { displayName: "outer", id: "d005f6c63707670c", size: new __O(16, 0) };
    getInner(): TestUnionInUnion_Outer_Inner {
        __S.testWhich("inner", __S.getUint16(8, this), 0, this);
        return __S.getAs(TestUnionInUnion_Outer_Inner, this);
    }
    initInner(): TestUnionInUnion_Outer_Inner {
        __S.setUint16(8, 0, this);
        return __S.getAs(TestUnionInUnion_Outer_Inner, this);
    }
    isInner(): boolean { return __S.getUint16(8, this) === 0; }
    setInner(): void { __S.setUint16(8, 0, this); }
    getBaz(): number {
        __S.testWhich("baz", __S.getUint16(8, this), 1, this);
        return __S.getInt32(0, this);
    }
    isBaz(): boolean { return __S.getUint16(8, this) === 1; }
    setBaz(value: number): void {
        __S.setUint16(8, 1, this);
        __S.setInt32(0, value, this);
    }
    toString(): string { return "TestUnionInUnion_Outer_" + super.toString(); }
    which(): TestUnionInUnion_Outer_Which { return __S.getUint16(8, this); }
}
export class TestUnionInUnion extends __S {
    static readonly _capnp = { displayName: "TestUnionInUnion", id: "89a9494f1b900f22", size: new __O(16, 0) };
    getOuter(): TestUnionInUnion_Outer { return __S.getAs(TestUnionInUnion_Outer, this); }
    initOuter(): TestUnionInUnion_Outer { return __S.getAs(TestUnionInUnion_Outer, this); }
    toString(): string { return "TestUnionInUnion_" + super.toString(); }
}
export class TestGroups_Groups_Baz extends __S {
    static readonly _capnp = { displayName: "baz", id: "f0fa30304066a4b3", size: new __O(16, 2) };
    getCorge(): number { return __S.getInt32(0, this); }
    setCorge(value: number): void { __S.setInt32(0, value, this); }
    getGrault(): string { return __S.getText(0, this); }
    setGrault(value: string): void { __S.setText(0, value, this); }
    getGarply(): string { return __S.getText(1, this); }
    setGarply(value: string): void { __S.setText(1, value, this); }
    toString(): string { return "TestGroups_Groups_Baz_" + super.toString(); }
}
export class TestGroups_Groups_Bar extends __S {
    static readonly _capnp = { displayName: "bar", id: "b727c0d0091a001d", size: new __O(16, 2) };
    getCorge(): number { return __S.getInt32(0, this); }
    setCorge(value: number): void { __S.setInt32(0, value, this); }
    getGrault(): string { return __S.getText(0, this); }
    setGrault(value: string): void { __S.setText(0, value, this); }
    getGarply(): capnp.Int64 { return __S.getInt64(8, this); }
    setGarply(value: capnp.Int64): void { __S.setInt64(8, value, this); }
    toString(): string { return "TestGroups_Groups_Bar_" + super.toString(); }
}
export class TestGroups_Groups_Foo extends __S {
    static readonly _capnp = { displayName: "foo", id: "f5fcba89c0c1196f", size: new __O(16, 2) };
    getCorge(): number { return __S.getInt32(0, this); }
    setCorge(value: number): void { __S.setInt32(0, value, this); }
    getGrault(): capnp.Int64 { return __S.getInt64(8, this); }
    setGrault(value: capnp.Int64): void { __S.setInt64(8, value, this); }
    getGarply(): string { return __S.getText(0, this); }
    setGarply(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestGroups_Groups_Foo_" + super.toString(); }
}
export enum TestGroups_Groups_Which {
    FOO = 0,
    BAR = 2,
    BAZ = 1
}
export class TestGroups_Groups extends __S {
    static readonly FOO = TestGroups_Groups_Which.FOO;
    static readonly BAR = TestGroups_Groups_Which.BAR;
    static readonly BAZ = TestGroups_Groups_Which.BAZ;
    static readonly _capnp = { displayName: "groups", id: "e22ae74ff9113268", size: new __O(16, 2) };
    getFoo(): TestGroups_Groups_Foo {
        __S.testWhich("foo", __S.getUint16(4, this), 0, this);
        return __S.getAs(TestGroups_Groups_Foo, this);
    }
    initFoo(): TestGroups_Groups_Foo {
        __S.setUint16(4, 0, this);
        return __S.getAs(TestGroups_Groups_Foo, this);
    }
    isFoo(): boolean { return __S.getUint16(4, this) === 0; }
    setFoo(): void { __S.setUint16(4, 0, this); }
    getBar(): TestGroups_Groups_Bar {
        __S.testWhich("bar", __S.getUint16(4, this), 2, this);
        return __S.getAs(TestGroups_Groups_Bar, this);
    }
    initBar(): TestGroups_Groups_Bar {
        __S.setUint16(4, 2, this);
        return __S.getAs(TestGroups_Groups_Bar, this);
    }
    isBar(): boolean { return __S.getUint16(4, this) === 2; }
    setBar(): void { __S.setUint16(4, 2, this); }
    getBaz(): TestGroups_Groups_Baz {
        __S.testWhich("baz", __S.getUint16(4, this), 1, this);
        return __S.getAs(TestGroups_Groups_Baz, this);
    }
    initBaz(): TestGroups_Groups_Baz {
        __S.setUint16(4, 1, this);
        return __S.getAs(TestGroups_Groups_Baz, this);
    }
    isBaz(): boolean { return __S.getUint16(4, this) === 1; }
    setBaz(): void { __S.setUint16(4, 1, this); }
    toString(): string { return "TestGroups_Groups_" + super.toString(); }
    which(): TestGroups_Groups_Which { return __S.getUint16(4, this); }
}
export class TestGroups extends __S {
    static readonly _capnp = { displayName: "TestGroups", id: "dc841556134c3103", size: new __O(16, 2) };
    getGroups(): TestGroups_Groups { return __S.getAs(TestGroups_Groups, this); }
    initGroups(): TestGroups_Groups { return __S.getAs(TestGroups_Groups, this); }
    toString(): string { return "TestGroups_" + super.toString(); }
}
export class TestInterleavedGroups_Group1_Corge extends __S {
    static readonly _capnp = { displayName: "corge", id: "db0afd413f4a313a", size: new __O(48, 6) };
    getGrault(): capnp.Uint64 { return __S.getUint64(32, this); }
    setGrault(value: capnp.Uint64): void { __S.setUint64(32, value, this); }
    getGarply(): number { return __S.getUint16(24, this); }
    setGarply(value: number): void { __S.setUint16(24, value, this); }
    getPlugh(): string { return __S.getText(2, this); }
    setPlugh(value: string): void { __S.setText(2, value, this); }
    getXyzzy(): string { return __S.getText(4, this); }
    setXyzzy(value: string): void { __S.setText(4, value, this); }
    toString(): string { return "TestInterleavedGroups_Group1_Corge_" + super.toString(); }
}
export enum TestInterleavedGroups_Group1_Which {
    QUX = 0,
    CORGE = 1,
    FRED = 2
}
export class TestInterleavedGroups_Group1 extends __S {
    static readonly QUX = TestInterleavedGroups_Group1_Which.QUX;
    static readonly CORGE = TestInterleavedGroups_Group1_Which.CORGE;
    static readonly FRED = TestInterleavedGroups_Group1_Which.FRED;
    static readonly _capnp = { displayName: "group1", id: "c7485a3516c7d3c8", size: new __O(48, 6) };
    getFoo(): number { return __S.getUint32(0, this); }
    setFoo(value: number): void { __S.setUint32(0, value, this); }
    getBar(): capnp.Uint64 { return __S.getUint64(8, this); }
    setBar(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    getQux(): number {
        __S.testWhich("qux", __S.getUint16(28, this), 0, this);
        return __S.getUint16(24, this);
    }
    isQux(): boolean { return __S.getUint16(28, this) === 0; }
    setQux(value: number): void {
        __S.setUint16(28, 0, this);
        __S.setUint16(24, value, this);
    }
    getCorge(): TestInterleavedGroups_Group1_Corge {
        __S.testWhich("corge", __S.getUint16(28, this), 1, this);
        return __S.getAs(TestInterleavedGroups_Group1_Corge, this);
    }
    initCorge(): TestInterleavedGroups_Group1_Corge {
        __S.setUint16(28, 1, this);
        return __S.getAs(TestInterleavedGroups_Group1_Corge, this);
    }
    isCorge(): boolean { return __S.getUint16(28, this) === 1; }
    setCorge(): void { __S.setUint16(28, 1, this); }
    getFred(): string {
        __S.testWhich("fred", __S.getUint16(28, this), 2, this);
        return __S.getText(2, this);
    }
    isFred(): boolean { return __S.getUint16(28, this) === 2; }
    setFred(value: string): void {
        __S.setUint16(28, 2, this);
        __S.setText(2, value, this);
    }
    getWaldo(): string { return __S.getText(0, this); }
    setWaldo(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestInterleavedGroups_Group1_" + super.toString(); }
    which(): TestInterleavedGroups_Group1_Which { return __S.getUint16(28, this); }
}
export class TestInterleavedGroups_Group2_Corge extends __S {
    static readonly _capnp = { displayName: "corge", id: "a017f0366827ee37", size: new __O(48, 6) };
    getGrault(): capnp.Uint64 { return __S.getUint64(40, this); }
    setGrault(value: capnp.Uint64): void { __S.setUint64(40, value, this); }
    getGarply(): number { return __S.getUint16(26, this); }
    setGarply(value: number): void { __S.setUint16(26, value, this); }
    getPlugh(): string { return __S.getText(3, this); }
    setPlugh(value: string): void { __S.setText(3, value, this); }
    getXyzzy(): string { return __S.getText(5, this); }
    setXyzzy(value: string): void { __S.setText(5, value, this); }
    toString(): string { return "TestInterleavedGroups_Group2_Corge_" + super.toString(); }
}
export enum TestInterleavedGroups_Group2_Which {
    QUX = 0,
    CORGE = 1,
    FRED = 2
}
export class TestInterleavedGroups_Group2 extends __S {
    static readonly QUX = TestInterleavedGroups_Group2_Which.QUX;
    static readonly CORGE = TestInterleavedGroups_Group2_Which.CORGE;
    static readonly FRED = TestInterleavedGroups_Group2_Which.FRED;
    static readonly _capnp = { displayName: "group2", id: "cc85a335569990e9", size: new __O(48, 6) };
    getFoo(): number { return __S.getUint32(4, this); }
    setFoo(value: number): void { __S.setUint32(4, value, this); }
    getBar(): capnp.Uint64 { return __S.getUint64(16, this); }
    setBar(value: capnp.Uint64): void { __S.setUint64(16, value, this); }
    getQux(): number {
        __S.testWhich("qux", __S.getUint16(30, this), 0, this);
        return __S.getUint16(26, this);
    }
    isQux(): boolean { return __S.getUint16(30, this) === 0; }
    setQux(value: number): void {
        __S.setUint16(30, 0, this);
        __S.setUint16(26, value, this);
    }
    getCorge(): TestInterleavedGroups_Group2_Corge {
        __S.testWhich("corge", __S.getUint16(30, this), 1, this);
        return __S.getAs(TestInterleavedGroups_Group2_Corge, this);
    }
    initCorge(): TestInterleavedGroups_Group2_Corge {
        __S.setUint16(30, 1, this);
        return __S.getAs(TestInterleavedGroups_Group2_Corge, this);
    }
    isCorge(): boolean { return __S.getUint16(30, this) === 1; }
    setCorge(): void { __S.setUint16(30, 1, this); }
    getFred(): string {
        __S.testWhich("fred", __S.getUint16(30, this), 2, this);
        return __S.getText(3, this);
    }
    isFred(): boolean { return __S.getUint16(30, this) === 2; }
    setFred(value: string): void {
        __S.setUint16(30, 2, this);
        __S.setText(3, value, this);
    }
    getWaldo(): string { return __S.getText(1, this); }
    setWaldo(value: string): void { __S.setText(1, value, this); }
    toString(): string { return "TestInterleavedGroups_Group2_" + super.toString(); }
    which(): TestInterleavedGroups_Group2_Which { return __S.getUint16(30, this); }
}
export class TestInterleavedGroups extends __S {
    static readonly _capnp = { displayName: "TestInterleavedGroups", id: "f77ed6f7454eec40", size: new __O(48, 6) };
    getGroup1(): TestInterleavedGroups_Group1 { return __S.getAs(TestInterleavedGroups_Group1, this); }
    initGroup1(): TestInterleavedGroups_Group1 { return __S.getAs(TestInterleavedGroups_Group1, this); }
    getGroup2(): TestInterleavedGroups_Group2 { return __S.getAs(TestInterleavedGroups_Group2, this); }
    initGroup2(): TestInterleavedGroups_Group2 { return __S.getAs(TestInterleavedGroups_Group2, this); }
    toString(): string { return "TestInterleavedGroups_" + super.toString(); }
}
export class TestUnionDefaults extends __S {
    static readonly _capnp = { displayName: "TestUnionDefaults", id: "94f7e0b103b4b718", size: new __O(0, 4), defaultS16s8s64s8Set: capnp.getPointerDefault("94f7e0b103b4b718", 0), defaultS0sps1s32Set: capnp.getPointerDefault("94f7e0b103b4b718", 1), defaultUnnamed1: capnp.getPointerDefault("94f7e0b103b4b718", 2), defaultUnnamed2: capnp.getPointerDefault("94f7e0b103b4b718", 3) };
    adoptS16s8s64s8Set(value: capnp.Orphan<TestUnion>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownS16s8s64s8Set(): capnp.Orphan<TestUnion> { return __S.disown(this.getS16s8s64s8Set()); }
    getS16s8s64s8Set(): TestUnion { return __S.getStruct(0, TestUnion, this, TestUnionDefaults._capnp.defaultS16s8s64s8Set); }
    hasS16s8s64s8Set(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initS16s8s64s8Set(): TestUnion { return __S.initStructAt(0, TestUnion, this); }
    setS16s8s64s8Set(value: TestUnion): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptS0sps1s32Set(value: capnp.Orphan<TestUnion>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownS0sps1s32Set(): capnp.Orphan<TestUnion> { return __S.disown(this.getS0sps1s32Set()); }
    getS0sps1s32Set(): TestUnion { return __S.getStruct(1, TestUnion, this, TestUnionDefaults._capnp.defaultS0sps1s32Set); }
    hasS0sps1s32Set(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initS0sps1s32Set(): TestUnion { return __S.initStructAt(1, TestUnion, this); }
    setS0sps1s32Set(value: TestUnion): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptUnnamed1(value: capnp.Orphan<TestUnnamedUnion>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownUnnamed1(): capnp.Orphan<TestUnnamedUnion> { return __S.disown(this.getUnnamed1()); }
    getUnnamed1(): TestUnnamedUnion { return __S.getStruct(2, TestUnnamedUnion, this, TestUnionDefaults._capnp.defaultUnnamed1); }
    hasUnnamed1(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initUnnamed1(): TestUnnamedUnion { return __S.initStructAt(2, TestUnnamedUnion, this); }
    setUnnamed1(value: TestUnnamedUnion): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptUnnamed2(value: capnp.Orphan<TestUnnamedUnion>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownUnnamed2(): capnp.Orphan<TestUnnamedUnion> { return __S.disown(this.getUnnamed2()); }
    getUnnamed2(): TestUnnamedUnion { return __S.getStruct(3, TestUnnamedUnion, this, TestUnionDefaults._capnp.defaultUnnamed2); }
    hasUnnamed2(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initUnnamed2(): TestUnnamedUnion { return __S.initStructAt(3, TestUnnamedUnion, this); }
    setUnnamed2(value: TestUnnamedUnion): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "TestUnionDefaults_" + super.toString(); }
}
export enum TestNestedTypes_NestedEnum {
    FOO,
    BAR
}
export enum TestNestedTypes_NestedStruct_NestedEnum {
    BAZ,
    QUX,
    QUUX
}
export class TestNestedTypes_NestedStruct extends __S {
    static readonly NestedEnum = TestNestedTypes_NestedStruct_NestedEnum;
    static readonly _capnp = { displayName: "NestedStruct", id: "82cd03a53b29d76b", size: new __O(8, 0), defaultOuterNestedEnum: capnp.getUint16Mask(1), defaultInnerNestedEnum: capnp.getUint16Mask(2) };
    getOuterNestedEnum(): TestNestedTypes_NestedEnum { return __S.getUint16(0, this, TestNestedTypes_NestedStruct._capnp.defaultOuterNestedEnum); }
    setOuterNestedEnum(value: TestNestedTypes_NestedEnum): void { __S.setUint16(0, value, this); }
    getInnerNestedEnum(): TestNestedTypes_NestedStruct_NestedEnum { return __S.getUint16(2, this, TestNestedTypes_NestedStruct._capnp.defaultInnerNestedEnum); }
    setInnerNestedEnum(value: TestNestedTypes_NestedStruct_NestedEnum): void { __S.setUint16(2, value, this); }
    toString(): string { return "TestNestedTypes_NestedStruct_" + super.toString(); }
}
export class TestNestedTypes extends __S {
    static readonly NestedEnum = TestNestedTypes_NestedEnum;
    static readonly NestedStruct = TestNestedTypes_NestedStruct;
    static readonly _capnp = { displayName: "TestNestedTypes", id: "d9f2b5941a343bcd", size: new __O(8, 1), defaultOuterNestedEnum: capnp.getUint16Mask(1), defaultInnerNestedEnum: capnp.getUint16Mask(2) };
    adoptNestedStruct(value: capnp.Orphan<TestNestedTypes_NestedStruct>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownNestedStruct(): capnp.Orphan<TestNestedTypes_NestedStruct> { return __S.disown(this.getNestedStruct()); }
    getNestedStruct(): TestNestedTypes_NestedStruct { return __S.getStruct(0, TestNestedTypes_NestedStruct, this); }
    hasNestedStruct(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initNestedStruct(): TestNestedTypes_NestedStruct { return __S.initStructAt(0, TestNestedTypes_NestedStruct, this); }
    setNestedStruct(value: TestNestedTypes_NestedStruct): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getOuterNestedEnum(): TestNestedTypes_NestedEnum { return __S.getUint16(0, this, TestNestedTypes._capnp.defaultOuterNestedEnum); }
    setOuterNestedEnum(value: TestNestedTypes_NestedEnum): void { __S.setUint16(0, value, this); }
    getInnerNestedEnum(): TestNestedTypes_NestedStruct_NestedEnum { return __S.getUint16(2, this, TestNestedTypes._capnp.defaultInnerNestedEnum); }
    setInnerNestedEnum(value: TestNestedTypes_NestedStruct_NestedEnum): void { __S.setUint16(2, value, this); }
    toString(): string { return "TestNestedTypes_" + super.toString(); }
}
export class TestUsing extends __S {
    static readonly _capnp = { displayName: "TestUsing", id: "e78aac389e77b065", size: new __O(8, 0), defaultOuterNestedEnum: capnp.getUint16Mask(1), defaultInnerNestedEnum: capnp.getUint16Mask(2) };
    getOuterNestedEnum(): TestNestedTypes_NestedEnum { return __S.getUint16(2, this, TestUsing._capnp.defaultOuterNestedEnum); }
    setOuterNestedEnum(value: TestNestedTypes_NestedEnum): void { __S.setUint16(2, value, this); }
    getInnerNestedEnum(): TestNestedTypes_NestedStruct_NestedEnum { return __S.getUint16(0, this, TestUsing._capnp.defaultInnerNestedEnum); }
    setInnerNestedEnum(value: TestNestedTypes_NestedStruct_NestedEnum): void { __S.setUint16(0, value, this); }
    toString(): string { return "TestUsing_" + super.toString(); }
}
export class TestLists_Struct0 extends __S {
    static readonly _capnp = { displayName: "Struct0", id: "8412c03b75b2cfee", size: new __O(0, 0) };
    toString(): string { return "TestLists_Struct0_" + super.toString(); }
}
export class TestLists_Struct1 extends __S {
    static readonly _capnp = { displayName: "Struct1", id: "e0fe5870b141ad69", size: new __O(8, 0) };
    getF(): boolean { return __S.getBit(0, this); }
    setF(value: boolean): void { __S.setBit(0, value, this); }
    toString(): string { return "TestLists_Struct1_" + super.toString(); }
}
export class TestLists_Struct8 extends __S {
    static readonly _capnp = { displayName: "Struct8", id: "a6411a353090145b", size: new __O(8, 0) };
    getF(): number { return __S.getUint8(0, this); }
    setF(value: number): void { __S.setUint8(0, value, this); }
    toString(): string { return "TestLists_Struct8_" + super.toString(); }
}
export class TestLists_Struct16 extends __S {
    static readonly _capnp = { displayName: "Struct16", id: "a8abf7a82928986c", size: new __O(8, 0) };
    getF(): number { return __S.getUint16(0, this); }
    setF(value: number): void { __S.setUint16(0, value, this); }
    toString(): string { return "TestLists_Struct16_" + super.toString(); }
}
export class TestLists_Struct32 extends __S {
    static readonly _capnp = { displayName: "Struct32", id: "ad7beedc4ed30742", size: new __O(8, 0) };
    getF(): number { return __S.getUint32(0, this); }
    setF(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "TestLists_Struct32_" + super.toString(); }
}
export class TestLists_Struct64 extends __S {
    static readonly _capnp = { displayName: "Struct64", id: "ef9a34f2ff7cc646", size: new __O(8, 0) };
    getF(): capnp.Uint64 { return __S.getUint64(0, this); }
    setF(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    toString(): string { return "TestLists_Struct64_" + super.toString(); }
}
export class TestLists_StructP extends __S {
    static readonly _capnp = { displayName: "StructP", id: "c6abf1b0329e6227", size: new __O(0, 1) };
    getF(): string { return __S.getText(0, this); }
    setF(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestLists_StructP_" + super.toString(); }
}
export class TestLists_Struct0c extends __S {
    static readonly _capnp = { displayName: "Struct0c", id: "943a234ca336b16a", size: new __O(0, 1) };
    getPad(): string { return __S.getText(0, this); }
    setPad(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestLists_Struct0c_" + super.toString(); }
}
export class TestLists_Struct1c extends __S {
    static readonly _capnp = { displayName: "Struct1c", id: "8991bc0e74a594cd", size: new __O(8, 1) };
    getF(): boolean { return __S.getBit(0, this); }
    setF(value: boolean): void { __S.setBit(0, value, this); }
    getPad(): string { return __S.getText(0, this); }
    setPad(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestLists_Struct1c_" + super.toString(); }
}
export class TestLists_Struct8c extends __S {
    static readonly _capnp = { displayName: "Struct8c", id: "ed267416528c7a24", size: new __O(8, 1) };
    getF(): number { return __S.getUint8(0, this); }
    setF(value: number): void { __S.setUint8(0, value, this); }
    getPad(): string { return __S.getText(0, this); }
    setPad(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestLists_Struct8c_" + super.toString(); }
}
export class TestLists_Struct16c extends __S {
    static readonly _capnp = { displayName: "Struct16c", id: "9978837b037d58e6", size: new __O(8, 1) };
    getF(): number { return __S.getUint16(0, this); }
    setF(value: number): void { __S.setUint16(0, value, this); }
    getPad(): string { return __S.getText(0, this); }
    setPad(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestLists_Struct16c_" + super.toString(); }
}
export class TestLists_Struct32c extends __S {
    static readonly _capnp = { displayName: "Struct32c", id: "ed5fa940f54a7904", size: new __O(8, 1) };
    getF(): number { return __S.getUint32(0, this); }
    setF(value: number): void { __S.setUint32(0, value, this); }
    getPad(): string { return __S.getText(0, this); }
    setPad(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestLists_Struct32c_" + super.toString(); }
}
export class TestLists_Struct64c extends __S {
    static readonly _capnp = { displayName: "Struct64c", id: "bc743778f2597c7d", size: new __O(8, 1) };
    getF(): capnp.Uint64 { return __S.getUint64(0, this); }
    setF(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getPad(): string { return __S.getText(0, this); }
    setPad(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestLists_Struct64c_" + super.toString(); }
}
export class TestLists_StructPc extends __S {
    static readonly _capnp = { displayName: "StructPc", id: "c2e364a40182013d", size: new __O(8, 1) };
    getF(): string { return __S.getText(0, this); }
    setF(value: string): void { __S.setText(0, value, this); }
    getPad(): capnp.Uint64 { return __S.getUint64(0, this); }
    setPad(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    toString(): string { return "TestLists_StructPc_" + super.toString(); }
}
export class TestLists extends __S {
    static readonly Struct0 = TestLists_Struct0;
    static readonly Struct1 = TestLists_Struct1;
    static readonly Struct8 = TestLists_Struct8;
    static readonly Struct16 = TestLists_Struct16;
    static readonly Struct32 = TestLists_Struct32;
    static readonly Struct64 = TestLists_Struct64;
    static readonly StructP = TestLists_StructP;
    static readonly Struct0c = TestLists_Struct0c;
    static readonly Struct1c = TestLists_Struct1c;
    static readonly Struct8c = TestLists_Struct8c;
    static readonly Struct16c = TestLists_Struct16c;
    static readonly Struct32c = TestLists_Struct32c;
    static readonly Struct64c = TestLists_Struct64c;
    static readonly StructPc = TestLists_StructPc;
    static readonly _capnp = { displayName: "TestLists", id: "e41885c94393277e", size: new __O(0, 10) };
    static _List0: capnp.ListCtor<TestLists_Struct0>;
    static _List1: capnp.ListCtor<TestLists_Struct1>;
    static _List8: capnp.ListCtor<TestLists_Struct8>;
    static _List16: capnp.ListCtor<TestLists_Struct16>;
    static _List32: capnp.ListCtor<TestLists_Struct32>;
    static _List64: capnp.ListCtor<TestLists_Struct64>;
    static _ListP: capnp.ListCtor<TestLists_StructP>;
    static _Int32ListList: capnp.ListCtor<capnp.List<number>>;
    static _TextListList: capnp.ListCtor<capnp.List<string>>;
    static _StructListList: capnp.ListCtor<capnp.List<TestAllTypes>>;
    adoptList0(value: capnp.Orphan<capnp.List<TestLists_Struct0>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownList0(): capnp.Orphan<capnp.List<TestLists_Struct0>> { return __S.disown(this.getList0()); }
    getList0(): capnp.List<TestLists_Struct0> { return __S.getList(0, TestLists._List0, this); }
    hasList0(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initList0(length: number): capnp.List<TestLists_Struct0> { return __S.initList(0, TestLists._List0, length, this); }
    setList0(value: capnp.List<TestLists_Struct0>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptList1(value: capnp.Orphan<capnp.List<TestLists_Struct1>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownList1(): capnp.Orphan<capnp.List<TestLists_Struct1>> { return __S.disown(this.getList1()); }
    getList1(): capnp.List<TestLists_Struct1> { return __S.getList(1, TestLists._List1, this); }
    hasList1(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initList1(length: number): capnp.List<TestLists_Struct1> { return __S.initList(1, TestLists._List1, length, this); }
    setList1(value: capnp.List<TestLists_Struct1>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptList8(value: capnp.Orphan<capnp.List<TestLists_Struct8>>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownList8(): capnp.Orphan<capnp.List<TestLists_Struct8>> { return __S.disown(this.getList8()); }
    getList8(): capnp.List<TestLists_Struct8> { return __S.getList(2, TestLists._List8, this); }
    hasList8(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initList8(length: number): capnp.List<TestLists_Struct8> { return __S.initList(2, TestLists._List8, length, this); }
    setList8(value: capnp.List<TestLists_Struct8>): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptList16(value: capnp.Orphan<capnp.List<TestLists_Struct16>>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownList16(): capnp.Orphan<capnp.List<TestLists_Struct16>> { return __S.disown(this.getList16()); }
    getList16(): capnp.List<TestLists_Struct16> { return __S.getList(3, TestLists._List16, this); }
    hasList16(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initList16(length: number): capnp.List<TestLists_Struct16> { return __S.initList(3, TestLists._List16, length, this); }
    setList16(value: capnp.List<TestLists_Struct16>): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptList32(value: capnp.Orphan<capnp.List<TestLists_Struct32>>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownList32(): capnp.Orphan<capnp.List<TestLists_Struct32>> { return __S.disown(this.getList32()); }
    getList32(): capnp.List<TestLists_Struct32> { return __S.getList(4, TestLists._List32, this); }
    hasList32(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initList32(length: number): capnp.List<TestLists_Struct32> { return __S.initList(4, TestLists._List32, length, this); }
    setList32(value: capnp.List<TestLists_Struct32>): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptList64(value: capnp.Orphan<capnp.List<TestLists_Struct64>>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownList64(): capnp.Orphan<capnp.List<TestLists_Struct64>> { return __S.disown(this.getList64()); }
    getList64(): capnp.List<TestLists_Struct64> { return __S.getList(5, TestLists._List64, this); }
    hasList64(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initList64(length: number): capnp.List<TestLists_Struct64> { return __S.initList(5, TestLists._List64, length, this); }
    setList64(value: capnp.List<TestLists_Struct64>): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    adoptListP(value: capnp.Orphan<capnp.List<TestLists_StructP>>): void { __S.adopt(value, __S.getPointer(6, this)); }
    disownListP(): capnp.Orphan<capnp.List<TestLists_StructP>> { return __S.disown(this.getListP()); }
    getListP(): capnp.List<TestLists_StructP> { return __S.getList(6, TestLists._ListP, this); }
    hasListP(): boolean { return !__S.isNull(__S.getPointer(6, this)); }
    initListP(length: number): capnp.List<TestLists_StructP> { return __S.initList(6, TestLists._ListP, length, this); }
    setListP(value: capnp.List<TestLists_StructP>): void { __S.copyFrom(value, __S.getPointer(6, this)); }
    adoptInt32ListList(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void { __S.adopt(value, __S.getPointer(7, this)); }
    disownInt32ListList(): capnp.Orphan<capnp.List<capnp.List<number>>> { return __S.disown(this.getInt32ListList()); }
    getInt32ListList(): capnp.List<capnp.List<number>> { return __S.getList(7, TestLists._Int32ListList, this); }
    hasInt32ListList(): boolean { return !__S.isNull(__S.getPointer(7, this)); }
    initInt32ListList(length: number): capnp.List<capnp.List<number>> { return __S.initList(7, TestLists._Int32ListList, length, this); }
    setInt32ListList(value: capnp.List<capnp.List<number>>): void { __S.copyFrom(value, __S.getPointer(7, this)); }
    adoptTextListList(value: capnp.Orphan<capnp.List<capnp.List<string>>>): void { __S.adopt(value, __S.getPointer(8, this)); }
    disownTextListList(): capnp.Orphan<capnp.List<capnp.List<string>>> { return __S.disown(this.getTextListList()); }
    getTextListList(): capnp.List<capnp.List<string>> { return __S.getList(8, TestLists._TextListList, this); }
    hasTextListList(): boolean { return !__S.isNull(__S.getPointer(8, this)); }
    initTextListList(length: number): capnp.List<capnp.List<string>> { return __S.initList(8, TestLists._TextListList, length, this); }
    setTextListList(value: capnp.List<capnp.List<string>>): void { __S.copyFrom(value, __S.getPointer(8, this)); }
    adoptStructListList(value: capnp.Orphan<capnp.List<capnp.List<TestAllTypes>>>): void { __S.adopt(value, __S.getPointer(9, this)); }
    disownStructListList(): capnp.Orphan<capnp.List<capnp.List<TestAllTypes>>> { return __S.disown(this.getStructListList()); }
    getStructListList(): capnp.List<capnp.List<TestAllTypes>> { return __S.getList(9, TestLists._StructListList, this); }
    hasStructListList(): boolean { return !__S.isNull(__S.getPointer(9, this)); }
    initStructListList(length: number): capnp.List<capnp.List<TestAllTypes>> { return __S.initList(9, TestLists._StructListList, length, this); }
    setStructListList(value: capnp.List<capnp.List<TestAllTypes>>): void { __S.copyFrom(value, __S.getPointer(9, this)); }
    toString(): string { return "TestLists_" + super.toString(); }
}
export class TestFieldZeroIsBit extends __S {
    static readonly _capnp = { displayName: "TestFieldZeroIsBit", id: "92fc29a80f3ddd5c", size: new __O(8, 0), defaultSecondBit: capnp.getBitMask(true, 1), defaultThirdField: capnp.getUint8Mask(123) };
    getBit(): boolean { return __S.getBit(0, this); }
    setBit(value: boolean): void { __S.setBit(0, value, this); }
    getSecondBit(): boolean { return __S.getBit(1, this, TestFieldZeroIsBit._capnp.defaultSecondBit); }
    setSecondBit(value: boolean): void { __S.setBit(1, value, this); }
    getThirdField(): number { return __S.getUint8(1, this, TestFieldZeroIsBit._capnp.defaultThirdField); }
    setThirdField(value: number): void { __S.setUint8(1, value, this); }
    toString(): string { return "TestFieldZeroIsBit_" + super.toString(); }
}
export class TestListDefaults extends __S {
    static readonly _capnp = { displayName: "TestListDefaults", id: "a851ad32cbc2ffea", size: new __O(0, 1), defaultLists: capnp.getPointerDefault("a851ad32cbc2ffea", 0) };
    adoptLists(value: capnp.Orphan<TestLists>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownLists(): capnp.Orphan<TestLists> { return __S.disown(this.getLists()); }
    getLists(): TestLists { return __S.getStruct(0, TestLists, this, TestListDefaults._capnp.defaultLists); }
    hasLists(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initLists(): TestLists { return __S.initStructAt(0, TestLists, this); }
    setLists(value: TestLists): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TestListDefaults_" + super.toString(); }
}
export enum TestLateUnion_TheUnion_Which {
    QUX = 0,
    CORGE = 1,
    GRAULT = 2
}
export class TestLateUnion_TheUnion extends __S {
    static readonly QUX = TestLateUnion_TheUnion_Which.QUX;
    static readonly CORGE = TestLateUnion_TheUnion_Which.CORGE;
    static readonly GRAULT = TestLateUnion_TheUnion_Which.GRAULT;
    static readonly _capnp = { displayName: "theUnion", id: "807280a2901aa079", size: new __O(24, 3) };
    getQux(): string {
        __S.testWhich("qux", __S.getUint16(6, this), 0, this);
        return __S.getText(1, this);
    }
    isQux(): boolean { return __S.getUint16(6, this) === 0; }
    setQux(value: string): void {
        __S.setUint16(6, 0, this);
        __S.setText(1, value, this);
    }
    adoptCorge(value: capnp.Orphan<capnp.List<number>>): void {
        __S.setUint16(6, 1, this);
        __S.adopt(value, __S.getPointer(1, this));
    }
    disownCorge(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getCorge()); }
    getCorge(): capnp.List<number> {
        __S.testWhich("corge", __S.getUint16(6, this), 1, this);
        return __S.getList(1, capnp.Int32List, this);
    }
    hasCorge(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initCorge(length: number): capnp.List<number> {
        __S.setUint16(6, 1, this);
        return __S.initList(1, capnp.Int32List, length, this);
    }
    isCorge(): boolean { return __S.getUint16(6, this) === 1; }
    setCorge(value: capnp.List<number>): void {
        __S.setUint16(6, 1, this);
        __S.copyFrom(value, __S.getPointer(1, this));
    }
    getGrault(): number {
        __S.testWhich("grault", __S.getUint16(6, this), 2, this);
        return __S.getFloat32(8, this);
    }
    isGrault(): boolean { return __S.getUint16(6, this) === 2; }
    setGrault(value: number): void {
        __S.setUint16(6, 2, this);
        __S.setFloat32(8, value, this);
    }
    toString(): string { return "TestLateUnion_TheUnion_" + super.toString(); }
    which(): TestLateUnion_TheUnion_Which { return __S.getUint16(6, this); }
}
export enum TestLateUnion_AnotherUnion_Which {
    QUX = 0,
    CORGE = 1,
    GRAULT = 2
}
export class TestLateUnion_AnotherUnion extends __S {
    static readonly QUX = TestLateUnion_AnotherUnion_Which.QUX;
    static readonly CORGE = TestLateUnion_AnotherUnion_Which.CORGE;
    static readonly GRAULT = TestLateUnion_AnotherUnion_Which.GRAULT;
    static readonly _capnp = { displayName: "anotherUnion", id: "c1973984dee98e3a", size: new __O(24, 3) };
    getQux(): string {
        __S.testWhich("qux", __S.getUint16(12, this), 0, this);
        return __S.getText(2, this);
    }
    isQux(): boolean { return __S.getUint16(12, this) === 0; }
    setQux(value: string): void {
        __S.setUint16(12, 0, this);
        __S.setText(2, value, this);
    }
    adoptCorge(value: capnp.Orphan<capnp.List<number>>): void {
        __S.setUint16(12, 1, this);
        __S.adopt(value, __S.getPointer(2, this));
    }
    disownCorge(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getCorge()); }
    getCorge(): capnp.List<number> {
        __S.testWhich("corge", __S.getUint16(12, this), 1, this);
        return __S.getList(2, capnp.Int32List, this);
    }
    hasCorge(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initCorge(length: number): capnp.List<number> {
        __S.setUint16(12, 1, this);
        return __S.initList(2, capnp.Int32List, length, this);
    }
    isCorge(): boolean { return __S.getUint16(12, this) === 1; }
    setCorge(value: capnp.List<number>): void {
        __S.setUint16(12, 1, this);
        __S.copyFrom(value, __S.getPointer(2, this));
    }
    getGrault(): number {
        __S.testWhich("grault", __S.getUint16(12, this), 2, this);
        return __S.getFloat32(16, this);
    }
    isGrault(): boolean { return __S.getUint16(12, this) === 2; }
    setGrault(value: number): void {
        __S.setUint16(12, 2, this);
        __S.setFloat32(16, value, this);
    }
    toString(): string { return "TestLateUnion_AnotherUnion_" + super.toString(); }
    which(): TestLateUnion_AnotherUnion_Which { return __S.getUint16(12, this); }
}
export class TestLateUnion extends __S {
    static readonly _capnp = { displayName: "TestLateUnion", id: "a76e3c9bb7fd56d3", size: new __O(24, 3) };
    getFoo(): number { return __S.getInt32(0, this); }
    setFoo(value: number): void { __S.setInt32(0, value, this); }
    getBar(): string { return __S.getText(0, this); }
    setBar(value: string): void { __S.setText(0, value, this); }
    getBaz(): number { return __S.getInt16(4, this); }
    setBaz(value: number): void { __S.setInt16(4, value, this); }
    getTheUnion(): TestLateUnion_TheUnion { return __S.getAs(TestLateUnion_TheUnion, this); }
    initTheUnion(): TestLateUnion_TheUnion { return __S.getAs(TestLateUnion_TheUnion, this); }
    getAnotherUnion(): TestLateUnion_AnotherUnion { return __S.getAs(TestLateUnion_AnotherUnion, this); }
    initAnotherUnion(): TestLateUnion_AnotherUnion { return __S.getAs(TestLateUnion_AnotherUnion, this); }
    toString(): string { return "TestLateUnion_" + super.toString(); }
}
export class TestOldVersion extends __S {
    static readonly _capnp = { displayName: "TestOldVersion", id: "95b30dd14e01dda8", size: new __O(8, 2) };
    getOld1(): capnp.Int64 { return __S.getInt64(0, this); }
    setOld1(value: capnp.Int64): void { __S.setInt64(0, value, this); }
    getOld2(): string { return __S.getText(0, this); }
    setOld2(value: string): void { __S.setText(0, value, this); }
    adoptOld3(value: capnp.Orphan<TestOldVersion>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownOld3(): capnp.Orphan<TestOldVersion> { return __S.disown(this.getOld3()); }
    getOld3(): TestOldVersion { return __S.getStruct(1, TestOldVersion, this); }
    hasOld3(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initOld3(): TestOldVersion { return __S.initStructAt(1, TestOldVersion, this); }
    setOld3(value: TestOldVersion): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "TestOldVersion_" + super.toString(); }
}
export class TestNewVersion extends __S {
    static readonly _capnp = { displayName: "TestNewVersion", id: "8ed75a7469f04ce3", size: new __O(16, 3), defaultNew1: capnp.getInt64Mask(new capnp.Int64(new Uint8Array([0xdb, 0x03, 0x00, 0x00]))), defaultNew2: capnp.getTextDefault("8ed75a7469f04ce3", 4) };
    getOld1(): capnp.Int64 { return __S.getInt64(0, this); }
    setOld1(value: capnp.Int64): void { __S.setInt64(0, value, this); }
    getOld2(): string { return __S.getText(0, this); }
    setOld2(value: string): void { __S.setText(0, value, this); }
    adoptOld3(value: capnp.Orphan<TestNewVersion>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownOld3(): capnp.Orphan<TestNewVersion> { return __S.disown(this.getOld3()); }
    getOld3(): TestNewVersion { return __S.getStruct(1, TestNewVersion, this); }
    hasOld3(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initOld3(): TestNewVersion { return __S.initStructAt(1, TestNewVersion, this); }
    setOld3(value: TestNewVersion): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getNew1(): capnp.Int64 { return __S.getInt64(8, this, TestNewVersion._capnp.defaultNew1); }
    setNew1(value: capnp.Int64): void { __S.setInt64(8, value, this); }
    getNew2(): string { return __S.getText(2, this, TestNewVersion._capnp.defaultNew2); }
    setNew2(value: string): void { __S.setText(2, value, this); }
    toString(): string { return "TestNewVersion_" + super.toString(); }
}
export enum TestOldUnionVersion_Which {
    A = 0,
    B = 1
}
export class TestOldUnionVersion extends __S {
    static readonly A = TestOldUnionVersion_Which.A;
    static readonly B = TestOldUnionVersion_Which.B;
    static readonly _capnp = { displayName: "TestOldUnionVersion", id: "bd5fe16e5170c492", size: new __O(16, 0) };
    isA(): boolean { return __S.getUint16(0, this) === 0; }
    setA(): void { __S.setUint16(0, 0, this); }
    getB(): capnp.Uint64 {
        __S.testWhich("b", __S.getUint16(0, this), 1, this);
        return __S.getUint64(8, this);
    }
    isB(): boolean { return __S.getUint16(0, this) === 1; }
    setB(value: capnp.Uint64): void {
        __S.setUint16(0, 1, this);
        __S.setUint64(8, value, this);
    }
    toString(): string { return "TestOldUnionVersion_" + super.toString(); }
    which(): TestOldUnionVersion_Which { return __S.getUint16(0, this); }
}
export enum TestNewUnionVersion_A_Which {
    A0 = 0,
    A1 = 1
}
export class TestNewUnionVersion_A extends __S {
    static readonly A0 = TestNewUnionVersion_A_Which.A0;
    static readonly A1 = TestNewUnionVersion_A_Which.A1;
    static readonly _capnp = { displayName: "a", id: "86232c1de4513e84", size: new __O(24, 0) };
    isA0(): boolean { return __S.getUint16(8, this) === 0; }
    setA0(): void { __S.setUint16(8, 0, this); }
    getA1(): capnp.Uint64 {
        __S.testWhich("a1", __S.getUint16(8, this), 1, this);
        return __S.getUint64(16, this);
    }
    isA1(): boolean { return __S.getUint16(8, this) === 1; }
    setA1(value: capnp.Uint64): void {
        __S.setUint16(8, 1, this);
        __S.setUint64(16, value, this);
    }
    toString(): string { return "TestNewUnionVersion_A_" + super.toString(); }
    which(): TestNewUnionVersion_A_Which { return __S.getUint16(8, this); }
}
export enum TestNewUnionVersion_Which {
    A = 0,
    B = 1
}
export class TestNewUnionVersion extends __S {
    static readonly A = TestNewUnionVersion_Which.A;
    static readonly B = TestNewUnionVersion_Which.B;
    static readonly _capnp = { displayName: "TestNewUnionVersion", id: "c7e4c513a975492b", size: new __O(24, 0) };
    getA(): TestNewUnionVersion_A {
        __S.testWhich("a", __S.getUint16(0, this), 0, this);
        return __S.getAs(TestNewUnionVersion_A, this);
    }
    initA(): TestNewUnionVersion_A {
        __S.setUint16(0, 0, this);
        return __S.getAs(TestNewUnionVersion_A, this);
    }
    isA(): boolean { return __S.getUint16(0, this) === 0; }
    setA(): void { __S.setUint16(0, 0, this); }
    getB(): capnp.Uint64 {
        __S.testWhich("b", __S.getUint16(0, this), 1, this);
        return __S.getUint64(8, this);
    }
    isB(): boolean { return __S.getUint16(0, this) === 1; }
    setB(value: capnp.Uint64): void {
        __S.setUint16(0, 1, this);
        __S.setUint64(8, value, this);
    }
    toString(): string { return "TestNewUnionVersion_" + super.toString(); }
    which(): TestNewUnionVersion_Which { return __S.getUint16(0, this); }
}
export class TestStructUnion_SomeStruct extends __S {
    static readonly _capnp = { displayName: "SomeStruct", id: "9daec9823f171085", size: new __O(0, 2) };
    getSomeText(): string { return __S.getText(0, this); }
    setSomeText(value: string): void { __S.setText(0, value, this); }
    getMoreText(): string { return __S.getText(1, this); }
    setMoreText(value: string): void { __S.setText(1, value, this); }
    toString(): string { return "TestStructUnion_SomeStruct_" + super.toString(); }
}
export enum TestStructUnion_Un_Which {
    STRUCT = 0,
    OBJECT = 1
}
export class TestStructUnion_Un extends __S {
    static readonly STRUCT = TestStructUnion_Un_Which.STRUCT;
    static readonly OBJECT = TestStructUnion_Un_Which.OBJECT;
    static readonly _capnp = { displayName: "un", id: "992edc677bef5a3c", size: new __O(8, 1) };
    adoptStruct(value: capnp.Orphan<TestStructUnion_SomeStruct>): void {
        __S.setUint16(0, 0, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownStruct(): capnp.Orphan<TestStructUnion_SomeStruct> { return __S.disown(this.getStruct()); }
    getStruct(): TestStructUnion_SomeStruct {
        __S.testWhich("struct", __S.getUint16(0, this), 0, this);
        return __S.getStruct(0, TestStructUnion_SomeStruct, this);
    }
    hasStruct(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initStruct(): TestStructUnion_SomeStruct {
        __S.setUint16(0, 0, this);
        return __S.initStructAt(0, TestStructUnion_SomeStruct, this);
    }
    isStruct(): boolean { return __S.getUint16(0, this) === 0; }
    setStruct(value: TestStructUnion_SomeStruct): void {
        __S.setUint16(0, 0, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    adoptObject(value: capnp.Orphan<TestAnyPointer>): void {
        __S.setUint16(0, 1, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownObject(): capnp.Orphan<TestAnyPointer> { return __S.disown(this.getObject()); }
    getObject(): TestAnyPointer {
        __S.testWhich("object", __S.getUint16(0, this), 1, this);
        return __S.getStruct(0, TestAnyPointer, this);
    }
    hasObject(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initObject(): TestAnyPointer {
        __S.setUint16(0, 1, this);
        return __S.initStructAt(0, TestAnyPointer, this);
    }
    isObject(): boolean { return __S.getUint16(0, this) === 1; }
    setObject(value: TestAnyPointer): void {
        __S.setUint16(0, 1, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string { return "TestStructUnion_Un_" + super.toString(); }
    which(): TestStructUnion_Un_Which { return __S.getUint16(0, this); }
}
export class TestStructUnion extends __S {
    static readonly SomeStruct = TestStructUnion_SomeStruct;
    static readonly _capnp = { displayName: "TestStructUnion", id: "faf781ef89a00e39", size: new __O(8, 1) };
    getUn(): TestStructUnion_Un { return __S.getAs(TestStructUnion_Un, this); }
    initUn(): TestStructUnion_Un { return __S.getAs(TestStructUnion_Un, this); }
    toString(): string { return "TestStructUnion_" + super.toString(); }
}
export class TestPrintInlineStructs_InlineStruct extends __S {
    static readonly _capnp = { displayName: "InlineStruct", id: "8e4936003708dac2", size: new __O(8, 1) };
    getInt32Field(): number { return __S.getInt32(0, this); }
    setInt32Field(value: number): void { __S.setInt32(0, value, this); }
    getTextField(): string { return __S.getText(0, this); }
    setTextField(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestPrintInlineStructs_InlineStruct_" + super.toString(); }
}
export class TestPrintInlineStructs extends __S {
    static readonly InlineStruct = TestPrintInlineStructs_InlineStruct;
    static readonly _capnp = { displayName: "TestPrintInlineStructs", id: "dec497819d097c3c", size: new __O(0, 2) };
    static _StructList: capnp.ListCtor<TestPrintInlineStructs_InlineStruct>;
    getSomeText(): string { return __S.getText(0, this); }
    setSomeText(value: string): void { __S.setText(0, value, this); }
    adoptStructList(value: capnp.Orphan<capnp.List<TestPrintInlineStructs_InlineStruct>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownStructList(): capnp.Orphan<capnp.List<TestPrintInlineStructs_InlineStruct>> { return __S.disown(this.getStructList()); }
    getStructList(): capnp.List<TestPrintInlineStructs_InlineStruct> { return __S.getList(1, TestPrintInlineStructs._StructList, this); }
    hasStructList(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initStructList(length: number): capnp.List<TestPrintInlineStructs_InlineStruct> { return __S.initList(1, TestPrintInlineStructs._StructList, length, this); }
    setStructList(value: capnp.List<TestPrintInlineStructs_InlineStruct>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "TestPrintInlineStructs_" + super.toString(); }
}
export class TestWholeFloatDefault extends __S {
    static readonly CONSTANT = 456;
    static readonly BIG_CONSTANT = 4.000000060189865e+30;
    static readonly _capnp = { displayName: "TestWholeFloatDefault", id: "91afd4a864dbb030", size: new __O(8, 0), defaultField: capnp.getFloat32Mask(123), defaultBigField: capnp.getFloat32Mask(2.0000000300949324e+30) };
    getField(): number { return __S.getFloat32(0, this, TestWholeFloatDefault._capnp.defaultField); }
    setField(value: number): void { __S.setFloat32(0, value, this); }
    getBigField(): number { return __S.getFloat32(4, this, TestWholeFloatDefault._capnp.defaultBigField); }
    setBigField(value: number): void { __S.setFloat32(4, value, this); }
    toString(): string { return "TestWholeFloatDefault_" + super.toString(); }
}
export class TestGenerics_Inner extends __S {
    static readonly _capnp = { displayName: "Inner", id: "f6a841117e19ac73", size: new __O(0, 2) };
    adoptFoo(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownFoo(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getFoo()); }
    getFoo(): capnp.Pointer { return __S.getPointer(0, this); }
    hasFoo(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setFoo(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptBar(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownBar(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getBar()); }
    getBar(): capnp.Pointer { return __S.getPointer(1, this); }
    hasBar(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    setBar(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "TestGenerics_Inner_" + super.toString(); }
}
export class TestGenerics_Inner2_DeepNest_DeepNestInterface extends __S {
    static readonly _capnp = { displayName: "DeepNestInterface", id: "8839ed86c9794287", size: new __O(0, 0) };
    toString(): string { return "TestGenerics_Inner2_DeepNest_DeepNestInterface_" + super.toString(); }
}
export class TestGenerics_Inner2_DeepNest extends __S {
    static readonly DeepNestInterface = TestGenerics_Inner2_DeepNest_DeepNestInterface;
    static readonly _capnp = { displayName: "DeepNest", id: "b6a0829c762b06f3", size: new __O(0, 4) };
    adoptFoo(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownFoo(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getFoo()); }
    getFoo(): capnp.Pointer { return __S.getPointer(0, this); }
    hasFoo(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setFoo(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptBar(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownBar(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getBar()); }
    getBar(): capnp.Pointer { return __S.getPointer(1, this); }
    hasBar(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    setBar(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptBaz(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownBaz(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getBaz()); }
    getBaz(): capnp.Pointer { return __S.getPointer(2, this); }
    hasBaz(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    setBaz(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptQux(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownQux(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getQux()); }
    getQux(): capnp.Pointer { return __S.getPointer(3, this); }
    hasQux(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    setQux(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "TestGenerics_Inner2_DeepNest_" + super.toString(); }
}
export class TestGenerics_Inner2 extends __S {
    static readonly DeepNest = TestGenerics_Inner2_DeepNest;
    static readonly _capnp = { displayName: "Inner2", id: "a9ab42b118d6d435", size: new __O(0, 4) };
    adoptBar(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownBar(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getBar()); }
    getBar(): capnp.Pointer { return __S.getPointer(0, this); }
    hasBar(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setBar(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptBaz(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownBaz(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getBaz()); }
    getBaz(): capnp.Pointer { return __S.getPointer(1, this); }
    hasBaz(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    setBaz(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptInnerBound(value: capnp.Orphan<TestGenerics_Inner>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownInnerBound(): capnp.Orphan<TestGenerics_Inner> { return __S.disown(this.getInnerBound()); }
    getInnerBound(): TestGenerics_Inner { return __S.getStruct(2, TestGenerics_Inner, this); }
    hasInnerBound(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initInnerBound(): TestGenerics_Inner { return __S.initStructAt(2, TestGenerics_Inner, this); }
    setInnerBound(value: TestGenerics_Inner): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptInnerUnbound(value: capnp.Orphan<TestGenerics_Inner>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownInnerUnbound(): capnp.Orphan<TestGenerics_Inner> { return __S.disown(this.getInnerUnbound()); }
    getInnerUnbound(): TestGenerics_Inner { return __S.getStruct(3, TestGenerics_Inner, this); }
    hasInnerUnbound(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initInnerUnbound(): TestGenerics_Inner { return __S.initStructAt(3, TestGenerics_Inner, this); }
    setInnerUnbound(value: TestGenerics_Inner): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "TestGenerics_Inner2_" + super.toString(); }
}
export class TestGenerics_Interface extends __S {
    static readonly _capnp = { displayName: "Interface", id: "c9e749e8dd54da5c", size: new __O(0, 0) };
    toString(): string { return "TestGenerics_Interface_" + super.toString(); }
}
export class TestGenerics_UseAliases extends __S {
    static readonly _capnp = { displayName: "UseAliases", id: "8e656edfb45ba6cf", size: new __O(0, 6) };
    adoptFoo(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownFoo(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getFoo()); }
    getFoo(): capnp.Pointer { return __S.getPointer(0, this); }
    hasFoo(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setFoo(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptInner(value: capnp.Orphan<TestGenerics_Inner>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownInner(): capnp.Orphan<TestGenerics_Inner> { return __S.disown(this.getInner()); }
    getInner(): TestGenerics_Inner { return __S.getStruct(1, TestGenerics_Inner, this); }
    hasInner(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initInner(): TestGenerics_Inner { return __S.initStructAt(1, TestGenerics_Inner, this); }
    setInner(value: TestGenerics_Inner): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptInner2(value: capnp.Orphan<TestGenerics_Inner2>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownInner2(): capnp.Orphan<TestGenerics_Inner2> { return __S.disown(this.getInner2()); }
    getInner2(): TestGenerics_Inner2 { return __S.getStruct(2, TestGenerics_Inner2, this); }
    hasInner2(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initInner2(): TestGenerics_Inner2 { return __S.initStructAt(2, TestGenerics_Inner2, this); }
    setInner2(value: TestGenerics_Inner2): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptInner2Bind(value: capnp.Orphan<TestGenerics_Inner2>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownInner2Bind(): capnp.Orphan<TestGenerics_Inner2> { return __S.disown(this.getInner2Bind()); }
    getInner2Bind(): TestGenerics_Inner2 { return __S.getStruct(3, TestGenerics_Inner2, this); }
    hasInner2Bind(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initInner2Bind(): TestGenerics_Inner2 { return __S.initStructAt(3, TestGenerics_Inner2, this); }
    setInner2Bind(value: TestGenerics_Inner2): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptInner2Text(value: capnp.Orphan<TestGenerics_Inner2>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownInner2Text(): capnp.Orphan<TestGenerics_Inner2> { return __S.disown(this.getInner2Text()); }
    getInner2Text(): TestGenerics_Inner2 { return __S.getStruct(4, TestGenerics_Inner2, this); }
    hasInner2Text(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initInner2Text(): TestGenerics_Inner2 { return __S.initStructAt(4, TestGenerics_Inner2, this); }
    setInner2Text(value: TestGenerics_Inner2): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptRevFoo(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownRevFoo(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getRevFoo()); }
    getRevFoo(): capnp.Pointer { return __S.getPointer(5, this); }
    hasRevFoo(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    setRevFoo(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    toString(): string { return "TestGenerics_UseAliases_" + super.toString(); }
}
export class TestGenerics_Ug extends __S {
    static readonly _capnp = { displayName: "ug", id: "b46a779beaf3384e", size: new __O(8, 2) };
    getUgfoo(): number { return __S.getInt32(4, this); }
    setUgfoo(value: number): void { __S.setInt32(4, value, this); }
    toString(): string { return "TestGenerics_Ug_" + super.toString(); }
}
export enum TestGenerics_Which {
    UV = 0,
    UG = 1
}
export class TestGenerics extends __S {
    static readonly UV = TestGenerics_Which.UV;
    static readonly UG = TestGenerics_Which.UG;
    static readonly Inner = TestGenerics_Inner;
    static readonly Inner2 = TestGenerics_Inner2;
    static readonly Interface = TestGenerics_Interface;
    static readonly UseAliases = TestGenerics_UseAliases;
    static readonly _capnp = { displayName: "TestGenerics", id: "9d5b8cd8de9922eb", size: new __O(8, 2) };
    adoptFoo(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownFoo(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getFoo()); }
    getFoo(): capnp.Pointer { return __S.getPointer(0, this); }
    hasFoo(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setFoo(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptRev(value: capnp.Orphan<TestGenerics>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownRev(): capnp.Orphan<TestGenerics> { return __S.disown(this.getRev()); }
    getRev(): TestGenerics { return __S.getStruct(1, TestGenerics, this); }
    hasRev(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initRev(): TestGenerics { return __S.initStructAt(1, TestGenerics, this); }
    setRev(value: TestGenerics): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    isUv(): boolean { return __S.getUint16(0, this) === 0; }
    setUv(): void { __S.setUint16(0, 0, this); }
    getUg(): TestGenerics_Ug {
        __S.testWhich("ug", __S.getUint16(0, this), 1, this);
        return __S.getAs(TestGenerics_Ug, this);
    }
    initUg(): TestGenerics_Ug {
        __S.setUint16(0, 1, this);
        return __S.getAs(TestGenerics_Ug, this);
    }
    isUg(): boolean { return __S.getUint16(0, this) === 1; }
    setUg(): void { __S.setUint16(0, 1, this); }
    toString(): string { return "TestGenerics_" + super.toString(); }
    which(): TestGenerics_Which { return __S.getUint16(0, this); }
}
export class TestGenericsWrapper extends __S {
    static readonly _capnp = { displayName: "TestGenericsWrapper", id: "a9b2b1f52dde845d", size: new __O(0, 1) };
    adoptValue(value: capnp.Orphan<TestGenerics>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownValue(): capnp.Orphan<TestGenerics> { return __S.disown(this.getValue()); }
    getValue(): TestGenerics { return __S.getStruct(0, TestGenerics, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initValue(): TestGenerics { return __S.initStructAt(0, TestGenerics, this); }
    setValue(value: TestGenerics): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TestGenericsWrapper_" + super.toString(); }
}
export class TestGenericsWrapper2 extends __S {
    static readonly _capnp = { displayName: "TestGenericsWrapper2", id: "f28f83667a557a04", size: new __O(0, 1) };
    adoptValue(value: capnp.Orphan<TestGenericsWrapper>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownValue(): capnp.Orphan<TestGenericsWrapper> { return __S.disown(this.getValue()); }
    getValue(): TestGenericsWrapper { return __S.getStruct(0, TestGenericsWrapper, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initValue(): TestGenericsWrapper { return __S.initStructAt(0, TestGenericsWrapper, this); }
    setValue(value: TestGenericsWrapper): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TestGenericsWrapper2_" + super.toString(); }
}
export class TestImplicitMethodParams extends __S {
    static readonly _capnp = { displayName: "TestImplicitMethodParams", id: "8b9717a3f8d85a9a", size: new __O(0, 0) };
    toString(): string { return "TestImplicitMethodParams_" + super.toString(); }
}
export class TestImplicitMethodParamsInGeneric extends __S {
    static readonly _capnp = { displayName: "TestImplicitMethodParamsInGeneric", id: "df9ccdeb81a704c9", size: new __O(0, 0) };
    toString(): string { return "TestImplicitMethodParamsInGeneric_" + super.toString(); }
}
export enum TestGenericsUnion_Which {
    FOO = 0,
    BAR = 1
}
export class TestGenericsUnion extends __S {
    static readonly FOO = TestGenericsUnion_Which.FOO;
    static readonly BAR = TestGenericsUnion_Which.BAR;
    static readonly _capnp = { displayName: "TestGenericsUnion", id: "a54870440e919063", size: new __O(8, 1) };
    adoptFoo(value: capnp.Orphan<capnp.Pointer>): void {
        __S.setUint16(0, 0, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownFoo(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getFoo()); }
    getFoo(): capnp.Pointer {
        __S.testWhich("foo", __S.getUint16(0, this), 0, this);
        return __S.getPointer(0, this);
    }
    hasFoo(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    isFoo(): boolean { return __S.getUint16(0, this) === 0; }
    setFoo(value: capnp.Pointer): void {
        __S.setUint16(0, 0, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    adoptBar(value: capnp.Orphan<capnp.Pointer>): void {
        __S.setUint16(0, 1, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownBar(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getBar()); }
    getBar(): capnp.Pointer {
        __S.testWhich("bar", __S.getUint16(0, this), 1, this);
        return __S.getPointer(0, this);
    }
    hasBar(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    isBar(): boolean { return __S.getUint16(0, this) === 1; }
    setBar(value: capnp.Pointer): void {
        __S.setUint16(0, 1, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string { return "TestGenericsUnion_" + super.toString(); }
    which(): TestGenericsUnion_Which { return __S.getUint16(0, this); }
}
export class TestUseGenerics extends __S {
    static readonly _capnp = { displayName: "TestUseGenerics", id: "9427b2a71030338f", size: new __O(0, 20), defaultDefault: capnp.getPointerDefault("9427b2a71030338f", 8), defaultDefaultInner: capnp.getPointerDefault("9427b2a71030338f", 9), defaultDefaultUser: capnp.getPointerDefault("9427b2a71030338f", 10), defaultDefaultWrapper: capnp.getPointerDefault("9427b2a71030338f", 11), defaultDefaultWrapper2: capnp.getPointerDefault("9427b2a71030338f", 12), defaultAliasFoo: capnp.getPointerDefault("9427b2a71030338f", 13), defaultAliasInner: capnp.getPointerDefault("9427b2a71030338f", 14), defaultAliasInner2: capnp.getPointerDefault("9427b2a71030338f", 15), defaultAliasInner2Bind: capnp.getPointerDefault("9427b2a71030338f", 16), defaultAliasInner2Text: capnp.getPointerDefault("9427b2a71030338f", 17), defaultAliasRev: capnp.getTextDefault("9427b2a71030338f", 18), defaultUseAliases: capnp.getPointerDefault("9427b2a71030338f", 19) };
    adoptBasic(value: capnp.Orphan<TestGenerics>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownBasic(): capnp.Orphan<TestGenerics> { return __S.disown(this.getBasic()); }
    getBasic(): TestGenerics { return __S.getStruct(0, TestGenerics, this); }
    hasBasic(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initBasic(): TestGenerics { return __S.initStructAt(0, TestGenerics, this); }
    setBasic(value: TestGenerics): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptInner(value: capnp.Orphan<TestGenerics_Inner>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownInner(): capnp.Orphan<TestGenerics_Inner> { return __S.disown(this.getInner()); }
    getInner(): TestGenerics_Inner { return __S.getStruct(1, TestGenerics_Inner, this); }
    hasInner(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initInner(): TestGenerics_Inner { return __S.initStructAt(1, TestGenerics_Inner, this); }
    setInner(value: TestGenerics_Inner): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptInner2(value: capnp.Orphan<TestGenerics_Inner2>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownInner2(): capnp.Orphan<TestGenerics_Inner2> { return __S.disown(this.getInner2()); }
    getInner2(): TestGenerics_Inner2 { return __S.getStruct(2, TestGenerics_Inner2, this); }
    hasInner2(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initInner2(): TestGenerics_Inner2 { return __S.initStructAt(2, TestGenerics_Inner2, this); }
    setInner2(value: TestGenerics_Inner2): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptUnspecified(value: capnp.Orphan<TestGenerics>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownUnspecified(): capnp.Orphan<TestGenerics> { return __S.disown(this.getUnspecified()); }
    getUnspecified(): TestGenerics { return __S.getStruct(3, TestGenerics, this); }
    hasUnspecified(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initUnspecified(): TestGenerics { return __S.initStructAt(3, TestGenerics, this); }
    setUnspecified(value: TestGenerics): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptUnspecifiedInner(value: capnp.Orphan<TestGenerics_Inner2>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownUnspecifiedInner(): capnp.Orphan<TestGenerics_Inner2> { return __S.disown(this.getUnspecifiedInner()); }
    getUnspecifiedInner(): TestGenerics_Inner2 { return __S.getStruct(4, TestGenerics_Inner2, this); }
    hasUnspecifiedInner(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initUnspecifiedInner(): TestGenerics_Inner2 { return __S.initStructAt(4, TestGenerics_Inner2, this); }
    setUnspecifiedInner(value: TestGenerics_Inner2): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptWrapper(value: capnp.Orphan<TestGenericsWrapper>): void { __S.adopt(value, __S.getPointer(8, this)); }
    disownWrapper(): capnp.Orphan<TestGenericsWrapper> { return __S.disown(this.getWrapper()); }
    getWrapper(): TestGenericsWrapper { return __S.getStruct(8, TestGenericsWrapper, this); }
    hasWrapper(): boolean { return !__S.isNull(__S.getPointer(8, this)); }
    initWrapper(): TestGenericsWrapper { return __S.initStructAt(8, TestGenericsWrapper, this); }
    setWrapper(value: TestGenericsWrapper): void { __S.copyFrom(value, __S.getPointer(8, this)); }
    adoptCap(value: capnp.Orphan<TestGenerics>): void { __S.adopt(value, __S.getPointer(18, this)); }
    disownCap(): capnp.Orphan<TestGenerics> { return __S.disown(this.getCap()); }
    getCap(): TestGenerics { return __S.getStruct(18, TestGenerics, this); }
    hasCap(): boolean { return !__S.isNull(__S.getPointer(18, this)); }
    initCap(): TestGenerics { return __S.initStructAt(18, TestGenerics, this); }
    setCap(value: TestGenerics): void { __S.copyFrom(value, __S.getPointer(18, this)); }
    getGenericCap(): capnp.Interface { return __S.getPointerAs(19, capnp.Interface, this); }
    setGenericCap(value: capnp.Interface): void { __S.copyFrom(value, __S.getPointer(19, this)); }
    adoptDefault(value: capnp.Orphan<TestGenerics>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownDefault(): capnp.Orphan<TestGenerics> { return __S.disown(this.getDefault()); }
    getDefault(): TestGenerics { return __S.getStruct(5, TestGenerics, this, TestUseGenerics._capnp.defaultDefault); }
    hasDefault(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initDefault(): TestGenerics { return __S.initStructAt(5, TestGenerics, this); }
    setDefault(value: TestGenerics): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    adoptDefaultInner(value: capnp.Orphan<TestGenerics_Inner>): void { __S.adopt(value, __S.getPointer(6, this)); }
    disownDefaultInner(): capnp.Orphan<TestGenerics_Inner> { return __S.disown(this.getDefaultInner()); }
    getDefaultInner(): TestGenerics_Inner { return __S.getStruct(6, TestGenerics_Inner, this, TestUseGenerics._capnp.defaultDefaultInner); }
    hasDefaultInner(): boolean { return !__S.isNull(__S.getPointer(6, this)); }
    initDefaultInner(): TestGenerics_Inner { return __S.initStructAt(6, TestGenerics_Inner, this); }
    setDefaultInner(value: TestGenerics_Inner): void { __S.copyFrom(value, __S.getPointer(6, this)); }
    adoptDefaultUser(value: capnp.Orphan<TestUseGenerics>): void { __S.adopt(value, __S.getPointer(7, this)); }
    disownDefaultUser(): capnp.Orphan<TestUseGenerics> { return __S.disown(this.getDefaultUser()); }
    getDefaultUser(): TestUseGenerics { return __S.getStruct(7, TestUseGenerics, this, TestUseGenerics._capnp.defaultDefaultUser); }
    hasDefaultUser(): boolean { return !__S.isNull(__S.getPointer(7, this)); }
    initDefaultUser(): TestUseGenerics { return __S.initStructAt(7, TestUseGenerics, this); }
    setDefaultUser(value: TestUseGenerics): void { __S.copyFrom(value, __S.getPointer(7, this)); }
    adoptDefaultWrapper(value: capnp.Orphan<TestGenericsWrapper>): void { __S.adopt(value, __S.getPointer(9, this)); }
    disownDefaultWrapper(): capnp.Orphan<TestGenericsWrapper> { return __S.disown(this.getDefaultWrapper()); }
    getDefaultWrapper(): TestGenericsWrapper { return __S.getStruct(9, TestGenericsWrapper, this, TestUseGenerics._capnp.defaultDefaultWrapper); }
    hasDefaultWrapper(): boolean { return !__S.isNull(__S.getPointer(9, this)); }
    initDefaultWrapper(): TestGenericsWrapper { return __S.initStructAt(9, TestGenericsWrapper, this); }
    setDefaultWrapper(value: TestGenericsWrapper): void { __S.copyFrom(value, __S.getPointer(9, this)); }
    adoptDefaultWrapper2(value: capnp.Orphan<TestGenericsWrapper2>): void { __S.adopt(value, __S.getPointer(10, this)); }
    disownDefaultWrapper2(): capnp.Orphan<TestGenericsWrapper2> { return __S.disown(this.getDefaultWrapper2()); }
    getDefaultWrapper2(): TestGenericsWrapper2 { return __S.getStruct(10, TestGenericsWrapper2, this, TestUseGenerics._capnp.defaultDefaultWrapper2); }
    hasDefaultWrapper2(): boolean { return !__S.isNull(__S.getPointer(10, this)); }
    initDefaultWrapper2(): TestGenericsWrapper2 { return __S.initStructAt(10, TestGenericsWrapper2, this); }
    setDefaultWrapper2(value: TestGenericsWrapper2): void { __S.copyFrom(value, __S.getPointer(10, this)); }
    adoptAliasFoo(value: capnp.Orphan<TestAllTypes>): void { __S.adopt(value, __S.getPointer(11, this)); }
    disownAliasFoo(): capnp.Orphan<TestAllTypes> { return __S.disown(this.getAliasFoo()); }
    getAliasFoo(): TestAllTypes { return __S.getStruct(11, TestAllTypes, this, TestUseGenerics._capnp.defaultAliasFoo); }
    hasAliasFoo(): boolean { return !__S.isNull(__S.getPointer(11, this)); }
    initAliasFoo(): TestAllTypes { return __S.initStructAt(11, TestAllTypes, this); }
    setAliasFoo(value: TestAllTypes): void { __S.copyFrom(value, __S.getPointer(11, this)); }
    adoptAliasInner(value: capnp.Orphan<TestGenerics_Inner>): void { __S.adopt(value, __S.getPointer(12, this)); }
    disownAliasInner(): capnp.Orphan<TestGenerics_Inner> { return __S.disown(this.getAliasInner()); }
    getAliasInner(): TestGenerics_Inner { return __S.getStruct(12, TestGenerics_Inner, this, TestUseGenerics._capnp.defaultAliasInner); }
    hasAliasInner(): boolean { return !__S.isNull(__S.getPointer(12, this)); }
    initAliasInner(): TestGenerics_Inner { return __S.initStructAt(12, TestGenerics_Inner, this); }
    setAliasInner(value: TestGenerics_Inner): void { __S.copyFrom(value, __S.getPointer(12, this)); }
    adoptAliasInner2(value: capnp.Orphan<TestGenerics_Inner2>): void { __S.adopt(value, __S.getPointer(13, this)); }
    disownAliasInner2(): capnp.Orphan<TestGenerics_Inner2> { return __S.disown(this.getAliasInner2()); }
    getAliasInner2(): TestGenerics_Inner2 { return __S.getStruct(13, TestGenerics_Inner2, this, TestUseGenerics._capnp.defaultAliasInner2); }
    hasAliasInner2(): boolean { return !__S.isNull(__S.getPointer(13, this)); }
    initAliasInner2(): TestGenerics_Inner2 { return __S.initStructAt(13, TestGenerics_Inner2, this); }
    setAliasInner2(value: TestGenerics_Inner2): void { __S.copyFrom(value, __S.getPointer(13, this)); }
    adoptAliasInner2Bind(value: capnp.Orphan<TestGenerics_Inner2>): void { __S.adopt(value, __S.getPointer(14, this)); }
    disownAliasInner2Bind(): capnp.Orphan<TestGenerics_Inner2> { return __S.disown(this.getAliasInner2Bind()); }
    getAliasInner2Bind(): TestGenerics_Inner2 { return __S.getStruct(14, TestGenerics_Inner2, this, TestUseGenerics._capnp.defaultAliasInner2Bind); }
    hasAliasInner2Bind(): boolean { return !__S.isNull(__S.getPointer(14, this)); }
    initAliasInner2Bind(): TestGenerics_Inner2 { return __S.initStructAt(14, TestGenerics_Inner2, this); }
    setAliasInner2Bind(value: TestGenerics_Inner2): void { __S.copyFrom(value, __S.getPointer(14, this)); }
    adoptAliasInner2Text(value: capnp.Orphan<TestGenerics_Inner2>): void { __S.adopt(value, __S.getPointer(15, this)); }
    disownAliasInner2Text(): capnp.Orphan<TestGenerics_Inner2> { return __S.disown(this.getAliasInner2Text()); }
    getAliasInner2Text(): TestGenerics_Inner2 { return __S.getStruct(15, TestGenerics_Inner2, this, TestUseGenerics._capnp.defaultAliasInner2Text); }
    hasAliasInner2Text(): boolean { return !__S.isNull(__S.getPointer(15, this)); }
    initAliasInner2Text(): TestGenerics_Inner2 { return __S.initStructAt(15, TestGenerics_Inner2, this); }
    setAliasInner2Text(value: TestGenerics_Inner2): void { __S.copyFrom(value, __S.getPointer(15, this)); }
    getAliasRev(): string { return __S.getText(16, this, TestUseGenerics._capnp.defaultAliasRev); }
    setAliasRev(value: string): void { __S.setText(16, value, this); }
    adoptUseAliases(value: capnp.Orphan<TestGenerics_UseAliases>): void { __S.adopt(value, __S.getPointer(17, this)); }
    disownUseAliases(): capnp.Orphan<TestGenerics_UseAliases> { return __S.disown(this.getUseAliases()); }
    getUseAliases(): TestGenerics_UseAliases { return __S.getStruct(17, TestGenerics_UseAliases, this, TestUseGenerics._capnp.defaultUseAliases); }
    hasUseAliases(): boolean { return !__S.isNull(__S.getPointer(17, this)); }
    initUseAliases(): TestGenerics_UseAliases { return __S.initStructAt(17, TestGenerics_UseAliases, this); }
    setUseAliases(value: TestGenerics_UseAliases): void { __S.copyFrom(value, __S.getPointer(17, this)); }
    toString(): string { return "TestUseGenerics_" + super.toString(); }
}
export class TestEmptyStruct extends __S {
    static readonly _capnp = { displayName: "TestEmptyStruct", id: "c5598844441096dc", size: new __O(0, 0) };
    toString(): string { return "TestEmptyStruct_" + super.toString(); }
}
export class TestConstants extends __S {
    static readonly TEXT_LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly ENUM_LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly FLOAT64LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly FLOAT32LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly UINT64LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly UINT32LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly UINT8LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly INT64LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly INT32LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly INT16LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly INT8LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly BOOL_LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly ENUM_CONST = 5;
    static readonly FLOAT64CONST = -1.23e+47;
    static readonly TEXT_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly STRUCT_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly DATA_LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly DATA_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly UINT32CONST = 3456789012;
    static readonly STRUCT_LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly INT64CONST = new capnp.Int64(new Uint8Array([0x87, 0x20, 0xf2, 0x79]));
    static readonly INT32CONST = -12345678;
    static readonly INT8CONST = -123;
    static readonly BOOL_CONST = true;
    static readonly VOID_LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly UINT64CONST = new capnp.Int64(new Uint8Array([0xd2, 0x0a, 0x1f, 0xeb]));
    static readonly VOID_CONST = undefined;
    static readonly UINT16LIST_CONST = capnp.getPointerDefault("abed745cd8c92095", -1);
    static readonly UINT16CONST = 45678;
    static readonly FLOAT32CONST = 1234.5;
    static readonly INT16CONST = -12345;
    static readonly UINT8CONST = 234;
    static readonly _capnp = { displayName: "TestConstants", id: "abed745cd8c92095", size: new __O(0, 0) };
    toString(): string { return "TestConstants_" + super.toString(); }
}
export class TestAnyPointerConstants extends __S {
    static readonly _capnp = { displayName: "TestAnyPointerConstants", id: "ddc280dbee9c99b3", size: new __O(0, 4) };
    adoptAnyKindAsStruct(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownAnyKindAsStruct(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getAnyKindAsStruct()); }
    getAnyKindAsStruct(): capnp.Pointer { return __S.getPointer(0, this); }
    hasAnyKindAsStruct(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setAnyKindAsStruct(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptAnyStructAsStruct(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownAnyStructAsStruct(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getAnyStructAsStruct()); }
    getAnyStructAsStruct(): capnp.Pointer { return __S.getPointer(1, this); }
    hasAnyStructAsStruct(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    setAnyStructAsStruct(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptAnyKindAsList(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownAnyKindAsList(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getAnyKindAsList()); }
    getAnyKindAsList(): capnp.Pointer { return __S.getPointer(2, this); }
    hasAnyKindAsList(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    setAnyKindAsList(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptAnyListAsList(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownAnyListAsList(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getAnyListAsList()); }
    getAnyListAsList(): capnp.Pointer { return __S.getPointer(3, this); }
    hasAnyListAsList(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    setAnyListAsList(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "TestAnyPointerConstants_" + super.toString(); }
}
export class TestInterface extends __S {
    static readonly _capnp = { displayName: "TestInterface", id: "88eb12a0e0af92b2", size: new __O(0, 0) };
    toString(): string { return "TestInterface_" + super.toString(); }
}
export class TestExtends extends __S {
    static readonly _capnp = { displayName: "TestExtends", id: "e4e9bac98670b748", size: new __O(0, 0) };
    toString(): string { return "TestExtends_" + super.toString(); }
}
export class TestExtends2 extends __S {
    static readonly _capnp = { displayName: "TestExtends2", id: "98d7e0ef61488783", size: new __O(0, 0) };
    toString(): string { return "TestExtends2_" + super.toString(); }
}
export class TestPipeline_Box extends __S {
    static readonly _capnp = { displayName: "Box", id: "b0b29e51db0e26b1", size: new __O(0, 1) };
    getCap(): capnp.Interface { return __S.getPointerAs(0, capnp.Interface, this); }
    setCap(value: capnp.Interface): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TestPipeline_Box_" + super.toString(); }
}
export class TestPipeline_AnyBox extends __S {
    static readonly _capnp = { displayName: "AnyBox", id: "9442ad5a1d2c8acb", size: new __O(0, 1) };
    adoptCap(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownCap(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getCap()); }
    getCap(): capnp.Pointer { return __S.getPointer(0, this); }
    hasCap(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setCap(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TestPipeline_AnyBox_" + super.toString(); }
}
export class TestPipeline extends __S {
    static readonly Box = TestPipeline_Box;
    static readonly AnyBox = TestPipeline_AnyBox;
    static readonly _capnp = { displayName: "TestPipeline", id: "a5a404caa61d4cd0", size: new __O(0, 0) };
    toString(): string { return "TestPipeline_" + super.toString(); }
}
export class TestCallOrder extends __S {
    static readonly _capnp = { displayName: "TestCallOrder", id: "a0e77035bdff0051", size: new __O(0, 0) };
    toString(): string { return "TestCallOrder_" + super.toString(); }
}
export class TestTailCallee_TailResult extends __S {
    static readonly _capnp = { displayName: "TailResult", id: "a9ed2e5a9fd53d19", size: new __O(8, 2) };
    getI(): number { return __S.getUint32(0, this); }
    setI(value: number): void { __S.setUint32(0, value, this); }
    getT(): string { return __S.getText(0, this); }
    setT(value: string): void { __S.setText(0, value, this); }
    getC(): capnp.Interface { return __S.getPointerAs(1, capnp.Interface, this); }
    setC(value: capnp.Interface): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "TestTailCallee_TailResult_" + super.toString(); }
}
export class TestTailCallee extends __S {
    static readonly TailResult = TestTailCallee_TailResult;
    static readonly _capnp = { displayName: "TestTailCallee", id: "ddd699207eb8e23b", size: new __O(0, 0) };
    toString(): string { return "TestTailCallee_" + super.toString(); }
}
export class TestTailCaller extends __S {
    static readonly _capnp = { displayName: "TestTailCaller", id: "870bf40110ce3035", size: new __O(0, 0) };
    toString(): string { return "TestTailCaller_" + super.toString(); }
}
export class TestHandle extends __S {
    static readonly _capnp = { displayName: "TestHandle", id: "a38e5efe41e53a15", size: new __O(0, 0) };
    toString(): string { return "TestHandle_" + super.toString(); }
}
export class TestMoreStuff extends __S {
    static readonly _capnp = { displayName: "TestMoreStuff", id: "ddc70bf9784133cf", size: new __O(0, 0) };
    toString(): string { return "TestMoreStuff_" + super.toString(); }
}
export class TestMembrane_Thing extends __S {
    static readonly _capnp = { displayName: "Thing", id: "9352e4e41f173917", size: new __O(0, 0) };
    toString(): string { return "TestMembrane_Thing_" + super.toString(); }
}
export class TestMembrane_Result extends __S {
    static readonly _capnp = { displayName: "Result", id: "b0c6163faf291965", size: new __O(0, 1) };
    getText(): string { return __S.getText(0, this); }
    setText(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestMembrane_Result_" + super.toString(); }
}
export class TestMembrane extends __S {
    static readonly Thing = TestMembrane_Thing;
    static readonly Result = TestMembrane_Result;
    static readonly _capnp = { displayName: "TestMembrane", id: "c07d8dcd80a69c0c", size: new __O(0, 0) };
    toString(): string { return "TestMembrane_" + super.toString(); }
}
export class TestContainMembrane extends __S {
    static readonly _capnp = { displayName: "TestContainMembrane", id: "949449ad7c11fa5c", size: new __O(0, 2) };
    getCap(): capnp.Interface { return __S.getPointerAs(0, capnp.Interface, this); }
    setCap(value: capnp.Interface): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptList(value: capnp.Orphan<capnp.List<capnp.Interface>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownList(): capnp.Orphan<capnp.List<capnp.Interface>> { return __S.disown(this.getList()); }
    getList(): capnp.List<capnp.Interface> { return __S.getList(1, capnp.InterfaceList, this); }
    hasList(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initList(length: number): capnp.List<capnp.Interface> { return __S.initList(1, capnp.InterfaceList, length, this); }
    setList(value: capnp.List<capnp.Interface>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "TestContainMembrane_" + super.toString(); }
}
export class TestTransferCap_Element extends __S {
    static readonly _capnp = { displayName: "Element", id: "c7263e8f88844abc", size: new __O(0, 2) };
    getText(): string { return __S.getText(0, this); }
    setText(value: string): void { __S.setText(0, value, this); }
    getCap(): capnp.Interface { return __S.getPointerAs(1, capnp.Interface, this); }
    setCap(value: capnp.Interface): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "TestTransferCap_Element_" + super.toString(); }
}
export class TestTransferCap extends __S {
    static readonly Element = TestTransferCap_Element;
    static readonly _capnp = { displayName: "TestTransferCap", id: "dd2b66a791a279f0", size: new __O(0, 1) };
    static _List: capnp.ListCtor<TestTransferCap_Element>;
    adoptList(value: capnp.Orphan<capnp.List<TestTransferCap_Element>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownList(): capnp.Orphan<capnp.List<TestTransferCap_Element>> { return __S.disown(this.getList()); }
    getList(): capnp.List<TestTransferCap_Element> { return __S.getList(0, TestTransferCap._List, this); }
    hasList(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initList(length: number): capnp.List<TestTransferCap_Element> { return __S.initList(0, TestTransferCap._List, length, this); }
    setList(value: capnp.List<TestTransferCap_Element>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TestTransferCap_" + super.toString(); }
}
export class TestKeywordMethods extends __S {
    static readonly _capnp = { displayName: "TestKeywordMethods", id: "9ae342d394247cfc", size: new __O(0, 0) };
    toString(): string { return "TestKeywordMethods_" + super.toString(); }
}
export class TestAuthenticatedBootstrap extends __S {
    static readonly _capnp = { displayName: "TestAuthenticatedBootstrap", id: "ea72cc77253798cd", size: new __O(0, 0) };
    toString(): string { return "TestAuthenticatedBootstrap_" + super.toString(); }
}
export class TestSturdyRef extends __S {
    static readonly _capnp = { displayName: "TestSturdyRef", id: "ceba982cb629f6c2", size: new __O(0, 2) };
    adoptHostId(value: capnp.Orphan<TestSturdyRefHostId>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownHostId(): capnp.Orphan<TestSturdyRefHostId> { return __S.disown(this.getHostId()); }
    getHostId(): TestSturdyRefHostId { return __S.getStruct(0, TestSturdyRefHostId, this); }
    hasHostId(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initHostId(): TestSturdyRefHostId { return __S.initStructAt(0, TestSturdyRefHostId, this); }
    setHostId(value: TestSturdyRefHostId): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptObjectId(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownObjectId(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getObjectId()); }
    getObjectId(): capnp.Pointer { return __S.getPointer(1, this); }
    hasObjectId(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    setObjectId(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "TestSturdyRef_" + super.toString(); }
}
export class TestSturdyRefHostId extends __S {
    static readonly _capnp = { displayName: "TestSturdyRefHostId", id: "e02d3bbe1010e342", size: new __O(0, 1) };
    getHost(): string { return __S.getText(0, this); }
    setHost(value: string): void { __S.setText(0, value, this); }
    toString(): string { return "TestSturdyRefHostId_" + super.toString(); }
}
export enum TestSturdyRefObjectId_Tag {
    TEST_INTERFACE,
    TEST_EXTENDS,
    TEST_PIPELINE,
    TEST_TAIL_CALLEE,
    TEST_TAIL_CALLER,
    TEST_MORE_STUFF
}
export class TestSturdyRefObjectId extends __S {
    static readonly Tag = TestSturdyRefObjectId_Tag;
    static readonly _capnp = { displayName: "TestSturdyRefObjectId", id: "aeb2ad168e2f5697", size: new __O(8, 0) };
    getTag(): TestSturdyRefObjectId_Tag { return __S.getUint16(0, this); }
    setTag(value: TestSturdyRefObjectId_Tag): void { __S.setUint16(0, value, this); }
    toString(): string { return "TestSturdyRefObjectId_" + super.toString(); }
}
export class TestProvisionId extends __S {
    static readonly _capnp = { displayName: "TestProvisionId", id: "9e5c574772b1d462", size: new __O(0, 0) };
    toString(): string { return "TestProvisionId_" + super.toString(); }
}
export class TestRecipientId extends __S {
    static readonly _capnp = { displayName: "TestRecipientId", id: "ea2fb7dca9cdbdea", size: new __O(0, 0) };
    toString(): string { return "TestRecipientId_" + super.toString(); }
}
export class TestThirdPartyCapId extends __S {
    static readonly _capnp = { displayName: "TestThirdPartyCapId", id: "a805157b98b65469", size: new __O(0, 0) };
    toString(): string { return "TestThirdPartyCapId_" + super.toString(); }
}
export class TestJoinResult extends __S {
    static readonly _capnp = { displayName: "TestJoinResult", id: "f4c58a8ebcd0f600", size: new __O(0, 0) };
    toString(): string { return "TestJoinResult_" + super.toString(); }
}
export enum TestNameAnnotation_BadlyNamedEnum {
    FOO,
    BAR,
    BAZ
}
export enum TestNameAnnotation_NestedStruct_DeeplyNestedEnum {
    QUUX,
    CORGE,
    GRAULT
}
export class TestNameAnnotation_NestedStruct extends __S {
    static readonly DeeplyNestedEnum = TestNameAnnotation_NestedStruct_DeeplyNestedEnum;
    static readonly _capnp = { displayName: "NestedStruct", id: "be406b6341d52284", size: new __O(8, 1) };
    getBadNestedFieldName(): boolean { return __S.getBit(0, this); }
    setBadNestedFieldName(value: boolean): void { __S.setBit(0, value, this); }
    adoptAnotherBadNestedFieldName(value: capnp.Orphan<TestNameAnnotation_NestedStruct>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownAnotherBadNestedFieldName(): capnp.Orphan<TestNameAnnotation_NestedStruct> { return __S.disown(this.getAnotherBadNestedFieldName()); }
    getAnotherBadNestedFieldName(): TestNameAnnotation_NestedStruct { return __S.getStruct(0, TestNameAnnotation_NestedStruct, this); }
    hasAnotherBadNestedFieldName(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initAnotherBadNestedFieldName(): TestNameAnnotation_NestedStruct { return __S.initStructAt(0, TestNameAnnotation_NestedStruct, this); }
    setAnotherBadNestedFieldName(value: TestNameAnnotation_NestedStruct): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TestNameAnnotation_NestedStruct_" + super.toString(); }
}
export class TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup extends __S {
    static readonly _capnp = { displayName: "badlyNamedGroup", id: "c3594bce5b24b722", size: new __O(8, 1) };
    toString(): string { return "TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup_" + super.toString(); }
}
export enum TestNameAnnotation_BadlyNamedUnion_Which {
    BADLY_NAMED_GROUP = 0,
    BAZ = 1
}
export class TestNameAnnotation_BadlyNamedUnion extends __S {
    static readonly BADLY_NAMED_GROUP = TestNameAnnotation_BadlyNamedUnion_Which.BADLY_NAMED_GROUP;
    static readonly BAZ = TestNameAnnotation_BadlyNamedUnion_Which.BAZ;
    static readonly _capnp = { displayName: "badlyNamedUnion", id: "89d9d1626b34017c", size: new __O(8, 1) };
    getBadlyNamedGroup(): TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup {
        __S.testWhich("badlyNamedGroup", __S.getUint16(6, this), 0, this);
        return __S.getAs(TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup, this);
    }
    initBadlyNamedGroup(): TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup {
        __S.setUint16(6, 0, this);
        return __S.getAs(TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup, this);
    }
    isBadlyNamedGroup(): boolean { return __S.getUint16(6, this) === 0; }
    setBadlyNamedGroup(): void { __S.setUint16(6, 0, this); }
    adoptBaz(value: capnp.Orphan<TestNameAnnotation_NestedStruct>): void {
        __S.setUint16(6, 1, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownBaz(): capnp.Orphan<TestNameAnnotation_NestedStruct> { return __S.disown(this.getBaz()); }
    getBaz(): TestNameAnnotation_NestedStruct {
        __S.testWhich("baz", __S.getUint16(6, this), 1, this);
        return __S.getStruct(0, TestNameAnnotation_NestedStruct, this);
    }
    hasBaz(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initBaz(): TestNameAnnotation_NestedStruct {
        __S.setUint16(6, 1, this);
        return __S.initStructAt(0, TestNameAnnotation_NestedStruct, this);
    }
    isBaz(): boolean { return __S.getUint16(6, this) === 1; }
    setBaz(value: TestNameAnnotation_NestedStruct): void {
        __S.setUint16(6, 1, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string { return "TestNameAnnotation_BadlyNamedUnion_" + super.toString(); }
    which(): TestNameAnnotation_BadlyNamedUnion_Which { return __S.getUint16(6, this); }
}
export enum TestNameAnnotation_Which {
    BAD_FIELD_NAME = 0,
    BAR = 1
}
export class TestNameAnnotation extends __S {
    static readonly BAD_FIELD_NAME = TestNameAnnotation_Which.BAD_FIELD_NAME;
    static readonly BAR = TestNameAnnotation_Which.BAR;
    static readonly BadlyNamedEnum = TestNameAnnotation_BadlyNamedEnum;
    static readonly NestedStruct = TestNameAnnotation_NestedStruct;
    static readonly _capnp = { displayName: "TestNameAnnotation", id: "d1fd8e9caf2a5d58", size: new __O(8, 1) };
    getBadFieldName(): boolean {
        __S.testWhich("badFieldName", __S.getUint16(2, this), 0, this);
        return __S.getBit(0, this);
    }
    isBadFieldName(): boolean { return __S.getUint16(2, this) === 0; }
    setBadFieldName(value: boolean): void {
        __S.setUint16(2, 0, this);
        __S.setBit(0, value, this);
    }
    getBar(): number {
        __S.testWhich("bar", __S.getUint16(2, this), 1, this);
        return __S.getInt8(0, this);
    }
    isBar(): boolean { return __S.getUint16(2, this) === 1; }
    setBar(value: number): void {
        __S.setUint16(2, 1, this);
        __S.setInt8(0, value, this);
    }
    getAnotherBadFieldName(): TestNameAnnotation_BadlyNamedEnum { return __S.getUint16(4, this); }
    setAnotherBadFieldName(value: TestNameAnnotation_BadlyNamedEnum): void { __S.setUint16(4, value, this); }
    getBadlyNamedUnion(): TestNameAnnotation_BadlyNamedUnion { return __S.getAs(TestNameAnnotation_BadlyNamedUnion, this); }
    initBadlyNamedUnion(): TestNameAnnotation_BadlyNamedUnion { return __S.getAs(TestNameAnnotation_BadlyNamedUnion, this); }
    toString(): string { return "TestNameAnnotation_" + super.toString(); }
    which(): TestNameAnnotation_Which { return __S.getUint16(2, this); }
}
export class TestNameAnnotationInterface extends __S {
    static readonly _capnp = { displayName: "TestNameAnnotationInterface", id: "d112a69d31ed918b", size: new __O(0, 0) };
    toString(): string { return "TestNameAnnotationInterface_" + super.toString(); }
}
TestAllTypes._StructList = capnp.CompositeList(TestAllTypes);
TestDefaults._StructList = capnp.CompositeList(TestAllTypes);
TestLists._List0 = capnp.CompositeList(TestLists_Struct0);
TestLists._List1 = capnp.CompositeList(TestLists_Struct1);
TestLists._List8 = capnp.CompositeList(TestLists_Struct8);
TestLists._List16 = capnp.CompositeList(TestLists_Struct16);
TestLists._List32 = capnp.CompositeList(TestLists_Struct32);
TestLists._List64 = capnp.CompositeList(TestLists_Struct64);
TestLists._ListP = capnp.CompositeList(TestLists_StructP);
TestLists._Int32ListList = capnp.PointerList(capnp.Int32List);
TestLists._TextListList = capnp.PointerList(capnp.TextList);
TestLists._StructListList = capnp.PointerList(capnp.CompositeList(TestAllTypes));
TestPrintInlineStructs._StructList = capnp.CompositeList(TestPrintInlineStructs_InlineStruct);
TestTransferCap._List = capnp.CompositeList(TestTransferCap_Element);
capnp.registerSchema(capnp.CodeGeneratorRequest, _capnpFileId, [
    "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",
    "Ka9wDCl8A8JftTDlFcBfo599FeGfWJjyCjuTwj9B+DkLU14B/DyFn0N4+3CmvAJ453CEdwrHzSKcKa8A3i8cB6svwkeHM+UVwMdQ+GiEV4Uz5RXA",
    "p1F4FcLvDmfKK2xXOHbb3QjfEM6UVwDfTOGPI/yNcKa8Avh74dje/Qg/Ec6UVwA3RyDcFIHDEsGUV1jPCFpPhI+OYMorgD8cifjrI1HYFWlQXr0c",
    "iUKwJoQfiryY8socTHtl5ucFUV8pBlwBCqyTpsY1A+SgSix5QddTtdvulWWUQPqrsyirGajPUtyKBGq0TobbyiP3Btdqyfsi476++7HRmzjmJtJH",
    "v6V6Ewiq4rrw3CdNDX96epfqS9JX1UV9dgBHGUTjBVkdkc28iOILJf3/s6L9L7eibVa3abaaf5NyEyZVUvP6TcjtBnO9WSUn5McKlUubV3VS70Gl",
    "16zc37zKE1BsulUwU3/6az8Bq428c9qr12yqmWLl+y2+dv/oRctPMI2ov0JUqdfhX1GLam6NfkU9CjhR1jEP/v31X1GTAk401Ovxp59Y4VhFmMo0",
    "UGMKeN33rt48aHb9m7Plpvpf058Cao8TTc4Xs5pO1DedkJtO1zevUAXcLnTS4bxTrH0UKx+rd3JNSfPaVuW9eDFiqBidYa2srKqWXTMmO2tgPcKU",
    "qvdMKk5O6ue4JJUsB/wRr83ucpzd+GtCOcxu5f2KMs5K57ZP0uGbTL4UzS6OmslyEfVuCCMu+NvSNRNf7nLuImtBXFsgfKHxRJ1kJ+2E/L7qiRo1",
    "Y7VUA+ZFDdVsopyosxTd2O00ZwbTjeGJOpxpxzKYduwuopyoTYp+bB7Bw9xszLmbKCdqRfYuLaQ5czFnCVFO1ETRkd1Dc+7CnOWQEw0nasWSain9",
    "zN1MCRcNB2rFlOo+mrEEM1YT5TydpZhTraQ5VD+3lijn6XDFoOoBmrMCc9YT5TxtUkyqHqTfX405G4hynuYVo6qHac5azHmcaOdpZE0foznrMedJ",
    "ws7TaFi1mX5mA2Zspf4lk9iZNcn3zJrkKy5N8juVJvmdQpN8Tp3K64ZjZRKcMtWv2H2/Yvf9it3vK3a/r9j9vmI3HitDeHUjIByrJ5HaCAT4aLw0",
    "NwdGI3n1WSQNAWdNzSdxr1tnv7Tml9f/wYkRBboPWqCyMnMHzBGXejBVAq1ob/gEWlmlfCIjw0mYCFJwV3M0Qpc8Z0TSszNvP/0CDcjSR60LuYbV",
    "hYs7CjxLOziDxv0CD5b/DzwIpst5CCjn/wE0Vuk2"
]);
